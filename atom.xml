<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arvin&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-13T00:47:38.889Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Arvin&#39;s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>零散知识记录(持续更新)</title>
    <link href="http://yoursite.com/2018/01/12/code-notes/"/>
    <id>http://yoursite.com/2018/01/12/code-notes/</id>
    <published>2018-01-12T02:40:06.000Z</published>
    <updated>2018-03-13T00:47:38.889Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20180112-00-blog.png" alt=""></p>
<p>记录一些平时比较少用或者容易忘记的一些知识点，主要是零散代码段。</p>
<p><strong>一，</strong> 使用宏重新定义控制台的log输出，去掉默认的输出内容，定位输出所在的类，代码行数及方法名。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;asl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    <span class="meta">#define THIS_FILE [(@<span class="meta-string">""</span> __FILE__) lastPathComponent]</span></div><div class="line">    <span class="meta">#define NSLog(fmt,...) _NSLog((@<span class="meta-string">"%@: Line %d %s "</span> fmt), THIS_FILE, __LINE__, __FUNCTION__, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="meta">#define NSLog(fmt,...)</span></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line"><span class="meta">#define _NSLog(fmt,...) &#123;                                               \</span></div><div class="line">    <span class="keyword">do</span> &#123;                                                                \</div><div class="line">        <span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> stringWithFormat:fmt, <span class="meta">##__VA_ARGS__]; \</span></div><div class="line">        printf(<span class="string">"%s\n"</span>,[str UTF8String]);                                \</div><div class="line">        asl_log(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ASL_LEVEL_NOTICE, <span class="string">"%s"</span>, [str UTF8String]);  \</div><div class="line">    &#125; <span class="keyword">while</span>(<span class="number">0</span>);                                                         \</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>二，</strong> 😂让wkwebview页面滚动起来 ‘丝般顺滑’，要知道默认滚动速度真是急死个人的。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)scrollViewWillBeginDragging:(<span class="built_in">UIScrollView</span> *)scrollView &#123;</div><div class="line">    [scrollView setDecelerationRate:<span class="built_in">UIScrollViewDecelerationRateNormal</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>三，</strong> 播放/停止系统音效（比如系统消息推送提示音），<strong><em> <a href="http://iphonedevwiki.net/index.php/AudioServices" target="_blank" rel="external">iOS 系统详细音效列表</a>。</em></strong> </p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加 AudioToolbox.framework 到项目，导入头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AudioToolbox/AudioToolbox.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 传入音效 ID 即可播放，‘1007’ 表示系统推送提示的那个音效</span></div><div class="line"><span class="comment">// 注：此方法即将废弃，官方建议使用以下方法</span></div><div class="line">AudioServicesPlaySystemSound(<span class="number">1007</span>);</div><div class="line"></div><div class="line"><span class="comment">// 此方法多了一个回调参数，无论成功或失败，每完成一次系统声音尝试都会执行完成块。 </span></div><div class="line"><span class="comment">// 回调在串行队列上发出，客户端负责处理线程安全。</span></div><div class="line">AudioServicesPlaySystemSoundWithCompletion(<span class="number">1007</span>, ^&#123;</div><div class="line">   <span class="comment">// 播放完成后回调 </span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 播放时带震动</span></div><div class="line"><span class="comment">// 注：此方法即将废弃，官方建议使用以下方法</span></div><div class="line">AudioServicesPlayAlertSound(<span class="number">1007</span>);</div><div class="line"></div><div class="line"><span class="comment">// 此方法多了一个回调参数，无论成功或失败，每完成一次系统声音尝试都会执行完成块。 </span></div><div class="line"><span class="comment">// 回调在串行队列上发出，客户端负责处理线程安全。</span></div><div class="line">AudioServicesPlayAlertSoundWithCompletion(<span class="number">1007</span>, ^&#123;</div><div class="line">   <span class="comment">// 播放完成后回调 </span></div><div class="line">&#125;); </div><div class="line"></div><div class="line"><span class="comment">// 销毁(释放)音效</span></div><div class="line">AudioServicesDisposeSystemSoundID(<span class="number">1007</span>);</div></pre></td></tr></table></figure>
<p><strong>四，</strong> 如果需要使用 <code>AudioServices</code> 播放自定义的音效，MP3文件是无法播放的，需要转换成 .caf 文件。<strong> 注意：<code>AudioServices</code>只能播放30秒以内的短声音，大于30秒的文件无法播放，可以使用 <code>AVAudioPlayer</code> 这个类来进行播放。</strong> </p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用终端命令转换</span></div><div class="line"><span class="comment">// xxx.mp3 需转换文件</span></div><div class="line"><span class="comment">// xxx.caf 被转换目标文件</span></div><div class="line"></div><div class="line"><span class="comment">// 方式1：此方法转换出来的文件比较大，不推荐</span></div><div class="line">$ afconvert -f caff -d LEI16@<span class="number">44100</span> -c <span class="number">1</span> xxx.mp3 xxx.caf</div><div class="line"></div><div class="line"><span class="comment">// 方式2：此方法转换出来的文件比较小，推荐使用</span></div><div class="line">$ afconvert xxx.mp3 xxx.caf -d ima4 -f caff -v</div></pre></td></tr></table></figure>
<p><strong>五，</strong> 播放自定义声效示例代码。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">   SystemSoundID soundID = <span class="number">0</span>;</div><div class="line">   <span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"xxx.caf"</span> withExtension:<span class="literal">nil</span>];</div><div class="line">   AudioServicesCreateSystemSoundID((__bridge <span class="built_in">CFURLRef</span> _Nonnull)(url), &amp;soundID);</div><div class="line">   AudioServicesAddSystemSoundCompletion(soundID, <span class="literal">NULL</span>, <span class="literal">NULL</span>, soundCompleteCallback, <span class="literal">NULL</span>);</div><div class="line">   <span class="comment">// AudioServicesPlayAlertSound(soundID); // 播放音效并震动</span></div><div class="line">   AudioServicesPlaySystemSound(soundID);   <span class="comment">// 只播放音效</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> soundCompleteCallback(SystemSoundID soundID, <span class="keyword">void</span> *clientData) &#123;</div><div class="line">   AudioServicesDisposeSystemSoundID(soundID); <span class="comment">// 销毁声音</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>六，</strong> 在任意界面控制器中跳转到根控制器，指定根控制器的 index。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 AppDelegate.h 中定义：</span></div><div class="line">- (<span class="keyword">void</span>)jumpTabBarSelectedIndex:(<span class="built_in">NSInteger</span>)index</div><div class="line">                       complete:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block;</div><div class="line"></div><div class="line"><span class="comment">// 在 AppDelegate.m 中实现：</span></div><div class="line">- (<span class="keyword">void</span>)jumpTabBarSelectedIndex:(<span class="built_in">NSInteger</span>)index complete:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block &#123;</div><div class="line">   [(<span class="built_in">UITabBarController</span> *)<span class="keyword">self</span>.window.rootViewController setSelectedIndex:index];</div><div class="line">   !block ?: block();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用：</span></div><div class="line">[kAppDelegate() jumpTabBarSelectedIndex:<span class="number">0</span> complete:^&#123; </div><div class="line">   <span class="comment">// 跳转完成后回调</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - 全局方法</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> AppDelegate *kAppDelegate() &#123;</div><div class="line">    <span class="keyword">return</span> (AppDelegate *)[<span class="built_in">UIApplication</span> sharedApplication].delegate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>七，</strong> 在任意页面获得当前的栈顶控制器。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span> *)currentTopVC &#123;</div><div class="line">    <span class="built_in">UIWindow</span> *keyWindow = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</div><div class="line">    <span class="built_in">UIViewController</span> *topVC = [<span class="keyword">self</span> topViewController:[keyWindow rootViewController]];</div><div class="line">    <span class="keyword">while</span> (topVC.presentedViewController) &#123;</div><div class="line">        topVC = [<span class="keyword">self</span> topViewController:topVC.presentedViewController];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> topVC;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIViewController</span> *)topViewController:(<span class="built_in">UIViewController</span> *)controller &#123;</div><div class="line">    <span class="keyword">if</span> ([controller isKindOfClass:[<span class="built_in">UINavigationController</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> topViewController:[(<span class="built_in">UINavigationController</span> *)controller topViewController]];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([controller isKindOfClass:[<span class="built_in">UITabBarController</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> topViewController:[(<span class="built_in">UITabBarController</span> *)controller selectedViewController]];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> controller;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>八，</strong> 获取启动页图片。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">UIImage</span> *)getLaunchImage &#123;</div><div class="line">    <span class="built_in">CGSize</span> viewSize = [<span class="built_in">UIScreen</span> mainScreen].bounds.size;</div><div class="line">    <span class="built_in">NSString</span> *viewOrientation = <span class="string">@"Portrait"</span>; <span class="comment">// Horizontal "Landscape"</span></div><div class="line">    <span class="built_in">NSString</span> *launchImage = <span class="string">@""</span>;</div><div class="line">    <span class="built_in">NSArray</span> *imagesDict = [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary][<span class="string">@"UILaunchImages"</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> imagesDict) &#123;</div><div class="line">        <span class="built_in">CGSize</span> imageSize = <span class="built_in">CGSizeFromString</span>(dict[<span class="string">@"UILaunchImageSize"</span>]);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">CGSizeEqualToSize</span>(imageSize, viewSize) &amp;&amp;</div><div class="line">            [viewOrientation isEqualToString:dict[<span class="string">@"UILaunchImageOrientation"</span>]]) &#123;</div><div class="line">            launchImage = dict[<span class="string">@"UILaunchImageName"</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageNamed:launchImage];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20180112-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;记录一些平时比较少用或者容易忘记的一些知识点，主要是零散代码段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，&lt;/stron
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac Terminal 设置代理</title>
    <link href="http://yoursite.com/2017/11/21/mac-terminal-proxy/"/>
    <id>http://yoursite.com/2017/11/21/mac-terminal-proxy/</id>
    <published>2017-11-21T02:14:24.000Z</published>
    <updated>2018-04-14T08:43:02.840Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20171121-01-blog.jpg" alt=""></p>
<p>昨天更新 CocoaPods 的时候，使用<code>pod setup</code>命令更新一直失败，估计是因为 CocoaPods 已被 iOS 开发者广泛使用，索引库的文件也越来越大，加上墙的原因，所以下载索引库文件到本地也越来越慢，没办法只能挂梯子了。</p>
<p>本来以为 Mac 的系统代理在终端也是有效的，但是一通查发现在终端需要单独设置代理。在网上找到很多相关文章，这里采取了两个最简单却行之有效的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd 到根目录，查看所有文件（包括隐藏文件）</div><div class="line">$ ls -al</div></pre></td></tr></table></figure>
<p>如果要在 Finder 中显示/隐藏系统隐藏文件，可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 显示 Finder  隐藏文件</div><div class="line">$ defaults write com.apple.finder AppleShowAllFiles -bool true</div><div class="line"></div><div class="line"># 隐藏 Finder 隐藏文件</div><div class="line">$ defaults write com.apple.finder AppleShowAllFiles -bool false</div></pre></td></tr></table></figure></p>
<p>找到 <code>.bash_profile</code> 文件，如果没有（Mac 默认是没有这个文件的），则创建一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 创建 .bash_profile 文件</div><div class="line">$ touch .bash_profile</div></pre></td></tr></table></figure></p>
<p>使用 vim 编辑器打开 <code>.bash_profile</code> 文件，按 i 进入可编辑状态，添加以下代码。</p>
<p>方式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># http://127.0.0.1:1080 替换成自己的 IP 和端口</div><div class="line">$ alias goproxy=&apos;export http_proxy=http://127.0.0.1:1080 https_proxy=http://127.0.0.1:1080&apos;</div><div class="line">$ alias disproxy=&apos;unset http_proxy https_proxy&apos;</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># http://127.0.0.1:1080 替换成自己的 IP 和端口</div><div class="line">$ alias setproxy=&quot;export http_proxy=http://127.0.0.1:1080; export https_proxy=$http_proxy; echo &apos;HTTP Proxy on&apos;;&quot;</div><div class="line">$ alias unsetproxy=&quot;unset http_proxy; unset https_proxy; echo &apos;HTTP Proxy off&apos;;&quot;</div></pre></td></tr></table></figure></p>
<p>编辑完后按 esc 键退出编辑状态，再输入 <code>:wq</code> 按回车保存并退出 vim 编辑器。</p>
<p>最后使用以下命令来让 <code>.bash_profile</code> 文件立即生效，或者重启电脑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>方式二可以通过命令来控制开启和关闭终端代理，使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 开启代理</div><div class="line">$ setproxy    </div><div class="line">HTTP Proxy on</div><div class="line"></div><div class="line"># 关闭代理</div><div class="line">$ unsetproxy  </div><div class="line">HTTP Proxy off</div></pre></td></tr></table></figure></p>
<p>开启代理后，平均下载速度将近 2M/s，几分钟就搞定了。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20171121-00-blog.png" alt=""></p>
<p>参考文章：<br><a href="https://eliyar.biz/proxy-for-mac-terminal/" target="_blank" rel="external">为Mac Terminal设置代理</a><br><a href="http://honglu.me/2015/11/06/%E7%BB%99iTerm%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/" target="_blank" rel="external">给 iTerm 终端设置代理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20171121-01-blog.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;昨天更新 CocoaPods 的时候，使用&lt;code&gt;pod setup&lt;/code&gt;命令更新一直失败，估计是因为
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
      <category term="Terminal" scheme="http://yoursite.com/categories/Technology/Terminal/"/>
    
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods安装第三方库报错</title>
    <link href="http://yoursite.com/2017/10/19/cocoapods-install-error/"/>
    <id>http://yoursite.com/2017/10/19/cocoapods-install-error/</id>
    <published>2017-10-19T02:41:52.000Z</published>
    <updated>2018-03-21T02:21:04.079Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20171219-00-blog.png" alt=""></p>
<p>今天在使用 CocoaPods 安装 <a href="https://github.com/ReactiveCocoa/ReactiveObjC" target="_blank" rel="external">ReactiveObjC</a> 的时候失败，报错内容如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[!] Error installing ReactiveObjC</div><div class="line">[!] /usr/bin/git clone https://github.com/ReactiveCocoa/ReactiveObjC.git /var/folders/bz/29qvklsn77x9_706n9wq8j5m0000gn/T/d20180314-1931-1qoi06x --template= --single-branch --depth 1 --branch 3.1.0</div><div class="line"></div><div class="line">Cloning into '/var/folders/bz/29qvklsn77x9_706n9wq8j5m0000gn/T/d20180314-1931-1qoi06x'...</div><div class="line">fatal: unable to access 'https://github.com/ReactiveCocoa/ReactiveObjC.git/': LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</div></pre></td></tr></table></figure></p>
<p>网上一通找，原来是 git 的代理配置问题导致，因为某些原因（🤡你懂的）导致梯子经常换，之前配置的端口不能用了，而换了新的端口配置没改，所以重新配置下就解决问题啦~</p>
<p>方法如下，在终端执行如下两行命令，后面键入 IP 地址和端口号。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git config --global https.proxy 'socks5://Your ip address:port'</div><div class="line"></div><div class="line">$ git config --global http.proxy 'socks5://Your ip address:port'</div></pre></td></tr></table></figure></p>
<p>完了重新 pod install，搞定~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20171219-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天在使用 CocoaPods 安装 &lt;a href=&quot;https://github.com/ReactiveCo
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
      <category term="CocoaPods" scheme="http://yoursite.com/categories/Technology/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>在同项目中使用 Swift 和 Objective-C</title>
    <link href="http://yoursite.com/2017/10/02/Swift-and-Objective-C-in-the-Same-Project/"/>
    <id>http://yoursite.com/2017/10/02/Swift-and-Objective-C-in-the-Same-Project/</id>
    <published>2017-10-02T03:18:12.000Z</published>
    <updated>2018-04-29T07:10:21.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20171002-00-blog.png?imageView/2/w/600/q/80" alt=""></p>
<p>Swift 与 Objective-C 的兼容性使你可以创建一个包含两种语言编写的项目。你可以使用此功能（called mix and match）编写具有混合语言代码库的应用程序。使用混合编写，你可以使用最新的 Swift 特性实现应用程序的部分功能，并将其无缝集成到你现有的 Objective-C 代码库中。</p>
<h3 id="Mix-and-Match-概述"><a href="#Mix-and-Match-概述" class="headerlink" title="Mix and Match 概述"></a>Mix and Match 概述</h3><p>Objective-C 和Swift 文件可以共存于一个项目中，无论该项目最初是 Objective-C 还是 Swift 项目。你可以直接将其他语言的文件添加到现有的项目中。这种自然的工作流程使得创建混合语言应用程序和框架目标（framework targets）与创建用单一语言编写的应用程序或框架目标一样简单。</p>
<p>取决于你是编写应用程序还是框架，使用混合语言编写的过程略有不同。下面描述了在同一个 Target 中使用两种语言的一般导入模式，并在以下各节中对其进行了更详细的介绍。</p>
<h3 id="从相同应用目标中导入代码"><a href="#从相同应用目标中导入代码" class="headerlink" title="从相同应用目标中导入代码"></a>从相同应用目标中导入代码</h3><p>如果你正在编写混合语言的应用程序，则可能需要从 Swift 访问你的 Objective-C 代码，或者从 Objective-C 访问你的 Swift 代码。本节描述的过程适用于非框架目标（non-framework targets）。</p>
<h4 id="将-Objective-C-导入到-Swift"><a href="#将-Objective-C-导入到-Swift" class="headerlink" title="将 Objective-C 导入到 Swift"></a>将 Objective-C 导入到 Swift</h4><p>要将一组 Objective-C 文件导入与 Swift 代码相同的应用程序 Target 中，你需要依靠 Objective-C 桥接头文件将这些文件公开到 Swift 中。当你将 Swift 文件添加到现有的 Objective-C 应用程序或将 Objective-C 文件添加到现有的 Swift 应用程序时，Xcode 提供创建此头文件。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20171002-01-blog.png" alt=""></p>
<p>如果你接受，Xcode 会创建头文件以及你正在创建的文件，并将其命名为你的产品模块名称（product module name），然后添加 “<code>-Bridging-Header.h</code>“。（稍后你将在产品模块命名中详细了解<a href="#Naming_Your_Product_Module">产品模块名称</a>）</p>
<p>或者，你可以通过选择 File &gt; New &gt; File &gt;（iOS，watchOS，tvOS 或 macOS）&gt; Source &gt; Header File 来自行创建桥接头。</p>
<p>你需要编辑桥接头文件以将你的 Objective-C 代码展示（公开）给你的 Swift 代码。</p>
<h5 id="将-Objective-C-代码从同一个目标导入到-Swift-中"><a href="#将-Objective-C-代码从同一个目标导入到-Swift-中" class="headerlink" title="将 Objective-C 代码从同一个目标导入到 Swift 中"></a>将 Objective-C 代码从同一个目标导入到 Swift 中</h5><p>在你的 Objective-C 桥接头文件中，导入你想暴露给 Swift 的每个 Objective-C 头文件。例如：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"XYZCustomCell.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"XYZCustomView.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"XYZCustomViewController.h"</span></span></div></pre></td></tr></table></figure>
<p>在 Build Settings &gt; Swift Compiler - Code Generation 中，确保 Objective-C 桥接头构建设置具有桥接头文件的路径。</p>
<p>路径应该与你的项目相关，类似于在 Build Settings 中指定 Info.plist 路径的方式。在大多数情况下，你不需要修改此设置。</p>
<p>在这个桥接头文件中列出的任何公共的 Objective-C 头文件都可以被 Swift 看到。然后在该 Target 中所有的 Swift 文件中将自动提供 Objective-C 的功能，而不需要任何导入语句。你自定义的 Objective-C 代码，可使用与系统类相同的 Swift 语法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myCell = <span class="type">XYZCustomCell</span>()</div><div class="line">myCell.subtitle = <span class="string">"A custom cell"</span></div></pre></td></tr></table></figure>
<h4 id="将-Swift-导入到-Objective-C"><a href="#将-Swift-导入到-Objective-C" class="headerlink" title="将 Swift 导入到 Objective-C"></a>将 Swift 导入到 Objective-C</h4><p>将 Swift 代码导入 Objective-C 时，你需要依靠 Xcode 生成的头文件将这些文件公开到 Objective-C 中。这个自动生成的文件是一个 Objective-C 头文件，用于在 Target 中声明 Swift 接口。它可以被认为是你的 Swift 的代码头（umbrella header）。这个代码头的名字是你的产品模块名称后面加上 “<code>-Swift.h</code>“。（稍后你将在产品模块命名中详细了解<a href="#Naming_Your_Product_Module">产品模块名称</a>）</p>
<p>默认情况下，生成的头文件包含用 <code>public</code> 或 <code>open</code> 修饰符标记的 Swift 声明的接口。如果你的应用程序 Target 具有 Objective-C 桥接标题，它还包含那些标有 <code>internal</code> 修饰符的标记。使用 <code>private</code> 或 <code>fileprivate</code> 修饰符标记的声明不会出现在生成的标题中。除非明确用 <code>@IBAction</code>，<code>@IBOutlet</code> 或 <code>@objc</code> 标记的私有声明，否则它们不会暴露给 Objective-C。如果你的应用程序 Target 是在启用测试的情况下编译的，则单元测试目标可以使用 <code>internal</code> 修饰符访问任何声明，就好像它们是使用 <code>public</code> 修饰符声明的，方法是将 <code>@testable</code> 添加到产品模块导入语句中。</p>
<p>有关访问级别修饰符的更多信息，请参阅 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097" target="_blank" rel="external">Swift 编程语言（Swift 4.1）</a>中的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41" target="_blank" rel="external">访问控制</a>。</p>
<p>你不需要做任何特别的事情来创建生成的头文件，只需将其导入到你的 Objective-C 代码中即可使用它的内容。请注意，生成头文件中的Swift接口包含对其中使用的所有 Objective-C 类型的引用。如果你在 Swift 代码中使用自己的 Objective-C 类型，请务必在将 Swift 生成的头文件导入要从中访问 Swift 代码的 Objective-C .m 文件之前，为这些类型导入 Objective-C 头文件。</p>
<h5 id="将-Swift-代码从同一个目标导入到-Objective-C-中"><a href="#将-Swift-代码从同一个目标导入到-Objective-C-中" class="headerlink" title="将 Swift 代码从同一个目标导入到 Objective-C 中"></a>将 Swift 代码从同一个目标导入到 Objective-C 中</h5><p>使用此语法将该 Target 中的 Swift 代码导入到该 Target 中的任何 Objective-C .m 文件中，并替换适当的名称：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ProductModuleName-Swift.h"</span></span></div></pre></td></tr></table></figure>
<p>Target 中的 Swift 文件将在包含此导入语句的 Objective-C .m 文件中可见。有关从 Objective-C 代码使用 Swift 的信息，请参阅<a href="#Using_Swift_from_Objective-C">从 Objective-C 使用 Swift</a>。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">Import into Swift</th>
<th style="text-align:center">Import into Objective-C</th>
</tr>
</thead>
<tbody>
<tr>
<td>Swift code</td>
<td style="text-align:center">No import statement</td>
<td style="text-align:center"><code>#import &quot;ProductModuleName-Swift.h&quot;</code></td>
</tr>
<tr>
<td>Objective-C code</td>
<td style="text-align:center">No import statement; Objective-C bridging header required</td>
<td style="text-align:center"><code>#import &quot;Header.h&quot;</code></td>
</tr>
</tbody>
</table>
<h3 id="从相同框架目标中导入代码"><a href="#从相同框架目标中导入代码" class="headerlink" title="从相同框架目标中导入代码"></a>从相同框架目标中导入代码</h3><p>如果你正在编写一个混合语言框架，你可能需要从 Swift 中访问你的 Objective-C 代码，或者从 Objective-C 中访问你的 Swift 代码。</p>
<h4 id="将-Objective-C-导入到-Swift-1"><a href="#将-Objective-C-导入到-Swift-1" class="headerlink" title="将 Objective-C 导入到 Swift"></a>将 Objective-C 导入到 Swift</h4><p>要将一组 Objective-C 文件导入与 Swift 代码相同的框架 Target 中，你需要将这些文件导入到框架的 Objective-C 桥接头文件中。</p>
<h5 id="将-Objective-C-代码从同一个框架导入到-Swift-中"><a href="#将-Objective-C-代码从同一个框架导入到-Swift-中" class="headerlink" title="将 Objective-C 代码从同一个框架导入到 Swift 中"></a>将 Objective-C 代码从同一个框架导入到 Swift 中</h5><ol>
<li>在 “Build Settings” 下的 “Packaging” 中，确保该框架 Target 的 “Defines Module” 设置设置为 “Yes”。</li>
<li>在你的类头文件中，导入你想暴露给 Swift 的每个 Objective-C 头文件。例如：</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;XYZ/XYZCustomCell.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;XYZ/XYZCustomView.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;XYZ/XYZCustomViewController.h&gt;</span></span></div></pre></td></tr></table></figure>
<p>在这个桥接头文件中列出的任何公共的 Objective-C 头文件都可以被 Swift 看到。该框架中的 Objective-C 文件的内容将自动在该框架目标中的任何 Swift 文件中提供，而不需要任何导入语句。你自定义的 Objective-C 代码，可使用与系统类相同的 Swift 语法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myOtherCell = <span class="type">XYZCustomCell</span>()</div><div class="line">myOtherCell.subtitle = <span class="string">"Another custom cell"</span></div></pre></td></tr></table></figure>
<h4 id="将-Swift-导入到-Objective-C-1"><a href="#将-Swift-导入到-Objective-C-1" class="headerlink" title="将 Swift 导入到 Objective-C"></a>将 Swift 导入到 Objective-C</h4><p>要将一组 Swift 文件导入与 Objective-C 代码相同的框架目标中，你不需要将任何内容导入框架的头文件中。相反，将用于 Swift 代码的 Xcode 生成的头文件导入到要使用 Swift 代码的任何 Objective-C .m 文件中。</p>
<p>由于为框架 Target 生成的头是框架公共接口的一部分，因此只有为 <code>public</code> 或 <code>open</code> 修饰符标记的声明才会出现在为框架 Target 生成的头中。</p>
<p>Objective-C 运行时可以访问用内部修饰符标记并在从 Objective-C 类继承的类中声明的 Swift 方法和属性。但是，它们在编译时不可访问，并且不会出现在为框架目标生成的头文件中。</p>
<p>有关访问级别修饰符的更多信息，请参阅 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097" target="_blank" rel="external">Swift 编程语言（Swift 4.1）</a>中的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41" target="_blank" rel="external">访问控制</a>。</p>
<h5 id="将-Swift-代码从同一个框架导入到-Objective-C-中"><a href="#将-Swift-代码从同一个框架导入到-Objective-C-中" class="headerlink" title="将 Swift 代码从同一个框架导入到 Objective-C 中"></a>将 Swift 代码从同一个框架导入到 Objective-C 中</h5><ol>
<li>在 “Build Settings” 下的 “Packaging” 中，确保该框架 Target 的 “Defines Module” 设置设置为 “Yes”。</li>
<li>使用此语法将该框架 Target 中的 Swift 代码导入该框架 Target 中的任何 Objective-C .m 文件，并替换适当的名称：</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;ProductName/ProductModuleName-Swift.h&gt;</span></span></div></pre></td></tr></table></figure>
<p>包含此导入语句的 Objective-C .m 文件中将显示框架 Target中的 Swift 文件。有关从 Objective-C 代码使用 Swift 的信息，请参阅<a href="#Using_Swift_from_Objective-C">从 Objective-C 使用 Swift</a>。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">Import into Swift</th>
<th style="text-align:center">Import into Objective-C</th>
</tr>
</thead>
<tbody>
<tr>
<td>Swift code</td>
<td style="text-align:center">No import statement</td>
<td style="text-align:center"><code>#import &lt;ProductName/ProductModuleName-Swift.h&gt;</code></td>
</tr>
<tr>
<td>Objective-C code</td>
<td style="text-align:center">No import statement; Objective-C umbrella header required</td>
<td style="text-align:center"><code>#import &quot;Header.h&quot;</code></td>
</tr>
</tbody>
</table>
<h3 id="导入外部框架"><a href="#导入外部框架" class="headerlink" title="导入外部框架"></a>导入外部框架</h3><p>你可以导入具有纯粹的 Objective-C 代码库，纯 Swift 代码库或混合语言代码库的外部框架。无论框架是用单一语言编写还是包含来自两种语言的文件，导入外部框架的过程都是相同的。当你导入外部框架时，请确保你要导入的框架的 “Defines Module” 构建设置设置为 “Yes”。</p>
<p>你可以使用以下语法将框架导入到不同 Target 中的任何 Swift 文件中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> FrameworkName</div></pre></td></tr></table></figure>
<p>你可以使用以下语法将框架导入到不同 Target 中的任何 Objective-C .m 文件中：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@import</span> FrameworkName;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">Import into Swift</th>
<th style="text-align:center">Import into Objective-C</th>
</tr>
</thead>
<tbody>
<tr>
<td>Any language framework</td>
<td style="text-align:center"><code>import FrameworkName</code></td>
<td style="text-align:center"><code>@import FrameworkName;</code></td>
</tr>
</tbody>
</table>
<h3 id="从-Objective-C-使用-Swift"><a href="#从-Objective-C-使用-Swift" class="headerlink" title=" 从 Objective-C 使用 Swift"></a><a id="Using_Swift_from_Objective-C"></a> 从 Objective-C 使用 Swift</h3><p>一旦将 Swift 代码导入到 Objective-C 中，就可以使用常规的 Objective-C 语法来处理 Swift 类。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MySwiftClass *swiftObject = [[MySwiftClass alloc] init];</div><div class="line">[swiftObject swiftMethod];</div></pre></td></tr></table></figure>
<p>Swift 类必须是 Objective-C 类的子类（descendant）才能在 Objective-C 中访问和使用。有关可以从 Objective-C 访问什么以及如何导入 Swift 接口的更多信息，请参见 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID53" target="_blank" rel="external">Swift 类型兼容性</a>。</p>
<h4 id="在-Objective-C-头文件中引用-Swift-类或协议"><a href="#在-Objective-C-头文件中引用-Swift-类或协议" class="headerlink" title="在 Objective-C 头文件中引用 Swift 类或协议"></a>在 Objective-C 头文件中引用 Swift 类或协议</h4><p>当你的代码引用来自不同模块的 Swift 类或协议时，可以使用 <code>@import</code> 将 Swift 模块导入到 Objective-C 头文件中。但是，为避免循环引用，请勿将同一模块中的 Swift 代码导入到 Objective-C 标头（.h）文件中。相反，你可以前向声明 Swift 类或协议以在 Objective-C 界面中引用它。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyObjcClass.h</span></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">MySwiftClass</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">MySwiftProtocol</span>;</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObjcClass</span> : <span class="title">NSObject</span></span></div><div class="line">- (MySwiftClass *)returnSwiftClassInstance;</div><div class="line">- (<span class="keyword">id</span> &lt;MySwiftProtocol&gt;)returnInstanceAdoptingSwiftProtocol;</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>Swift 类和协议的前向声明只能用作方法和属性声明的类型。</p>
<h4 id="声明可以被-Objective-C-类采用的-Swift-协议"><a href="#声明可以被-Objective-C-类采用的-Swift-协议" class="headerlink" title="声明可以被 Objective-C 类采用的 Swift 协议"></a>声明可以被 Objective-C 类采用的 Swift 协议</h4><p>要创建一个 Objective-C 类可以采用的 Swift 协议，请使用 <code>@objc</code> 属性标记协议声明。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MySwiftProtocol</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">requiredMethod</span><span class="params">()</span></span></div><div class="line">	 </div><div class="line">	<span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>协议声明 Objective-C 类必须实现的所有初始化方法，属性，下标和方法以符合协议。任何可选的协议要求都必须用 <code>@objc</code> 属性标记，并具有可选的修饰符。</p>
<p>如果你需要在满足 Swift 协议要求的 Objective-C 中声明弱属性，请使用弱修饰符标记 Swift 属性需求。请注意，应用弱修饰符对采用该协议的 Swift 类型没有影响。</p>
<h4 id="在-Objective-C-实现中采用-Swift-协议"><a href="#在-Objective-C-实现中采用-Swift-协议" class="headerlink" title="在 Objective-C 实现中采用 Swift 协议"></a>在 Objective-C 实现中采用 Swift 协议</h4><p>Objective-C 类可以通过导入由 Xcode 生成的 Swift 代码头并使用类扩展来在其实现（.m）文件中采用 Swift 协议。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyObjcClass.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"ProductModuleName-Swift.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObjcClass</span> () &lt;<span class="title">MySwiftProtocol</span>&gt;</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyObjcClass</span></span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="声明可以在-Objective-C-中使用的-Swift-错误类型"><a href="#声明可以在-Objective-C-中使用的-Swift-错误类型" class="headerlink" title="声明可以在 Objective-C 中使用的 Swift 错误类型"></a>声明可以在 Objective-C 中使用的 Swift 错误类型</h4><p>符合 Error 协议并使用 <code>@objc</code> 属性声明的 Swift 枚举产生一个 <code>NS_ENUM</code> 声明，以及一个 <code>NSString</code> 常量，用于生成头文件中相应的错误域。例如，给定下面的 Swift 枚举声明：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CustomError</span>: <span class="title">Int</span>, <span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> a, b, <span class="built_in">c</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是生成的头文件中相应的 Objective-C 声明：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Project-Swift.h</span></div><div class="line"><span class="keyword">typedef</span> SWIFT_ENUM(<span class="built_in">NSInteger</span>, CustomError) &#123;</div><div class="line">	CustomErrorA = <span class="number">0</span>,</div><div class="line">	CustomErrorB = <span class="number">1</span>,</div><div class="line">	CustomErrorC = <span class="number">2</span>,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> CustomErrorDomain = <span class="string">@"Project.CustomError"</span>;</div></pre></td></tr></table></figure>
<h3 id="覆盖-Objective-C-接口的-Swift-名称"><a href="#覆盖-Objective-C-接口的-Swift-名称" class="headerlink" title="覆盖 Objective-C 接口的 Swift 名称"></a>覆盖 Objective-C 接口的 Swift 名称</h3><p>Swift 编译器自动导入 Objective-C 代码作为传统的 Swift 代码。它导入 Objective-C 类工厂方法作为 Swift 初始化器，并且 Objective-C 枚举案例截断了名称。</p>
<p>代码中可能存在不自动处理的边界情况。如果需要更改由 Swift 导入的 Objective-C 方法名称，枚举大小或选项集值，则可以使用 <code>NS_SWIFT_NAME</code> 宏来自定义声明的导入方式。</p>
<h4 id="类工厂方法"><a href="#类工厂方法" class="headerlink" title="类工厂方法"></a>类工厂方法</h4><p>如果 Swift 编译器无法识别类工厂方法，则可以使用 <code>NS_SWIFT_NAME</code> 宏，传递初始化程序的 Swift 签名以使其正确导入。例如：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)recordWithRPM:(<span class="built_in">NSUInteger</span>)RPM <span class="built_in">NS_SWIFT_NAME</span>(init(rpm:));</div></pre></td></tr></table></figure>
<p>如果Swift编译器错误地将方法标识为类工厂方法，则可以使用 <code>NS_SWIFT_NAME</code> 宏，并传递该方法的 Swift 签名以使其正确导入。例如：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>)recordWithQuality:(<span class="keyword">double</span>)quality <span class="built_in">NS_SWIFT_NAME</span>(record(quality:));</div></pre></td></tr></table></figure>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>默认情况下，Swift 通过截断枚举值名称前缀来导入枚举。要自定义枚举大小写的名称，可以使用 <code>NS_SWIFT_NAME</code> 宏来传递 Swift 枚举大小写名称。例如：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ABCRecordSide) &#123;</div><div class="line">	ABCRecordSideA,</div><div class="line">	ABCRecordSideB <span class="built_in">NS_SWIFT_NAME</span>(flipSide),</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="提取-Objective-C-声明"><a href="#提取-Objective-C-声明" class="headerlink" title="提取 Objective-C 声明"></a>提取 Objective-C 声明</h3><p>你可以在 Objective-C 方法声明中使用 <code>NS_REFINED_FOR_SWIFT</code> 宏，以在扩展中提供改进的 Swift 接口，同时保持原始实现可从精确接口调用。例如，一个带有一个或多个指针参数的 Objective-C 方法可以在 Swift 中进行优化，以返回值的元组。</p>
<ul>
<li>初始化方法由 Swift 用双下划线（__）导入到它们的第一个参数标签。</li>
<li>如果 getter 或 setter 方法被标记为 <code>NS_REFINED_FOR_SWIFT</code>，那么对象下标方法将作为带有双下划线（__）的方法由 Swift 导入，而不是 Swift 下标。</li>
<li>其他方法使用双下划线（__）导入其基本名称。</li>
</ul>
<p>鉴于以下 Objective-C 声明：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Color</span> : <span class="title">NSObject</span></span></div><div class="line"> </div><div class="line">- (<span class="keyword">void</span>)getRed:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)red</div><div class="line">	 green:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)green</div><div class="line">	  blue:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)blue</div><div class="line">	 alpha:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)alpha <span class="built_in">NS_REFINED_FOR_SWIFT</span>;</div><div class="line"> </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>你可以像这样在一个扩展中提供一个精致的 Swift 接口：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Color</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> <span class="type">RGBA</span>: (red: <span class="type">CGFloat</span>, green: <span class="type">CGFloat</span>, blue: <span class="type">CGFloat</span>, alpha: <span class="type">CGFloat</span>) &#123;</div><div class="line">	   <span class="keyword">var</span> r: <span class="type">CGFloat</span> = <span class="number">0.0</span></div><div class="line">	   <span class="keyword">var</span> g: <span class="type">CGFloat</span> = <span class="number">0.0</span></div><div class="line">	   <span class="keyword">var</span> b: <span class="type">CGFloat</span> = <span class="number">0.0</span></div><div class="line">	   <span class="keyword">var</span> a: <span class="type">CGFloat</span> = <span class="number">0.0</span></div><div class="line">	   __getRed(red: &amp;r, green: &amp;g, blue: &amp;b, alpha: &amp;a)</div><div class="line">	   <span class="keyword">return</span> (red: r, green: g, blue: b, alpha: a)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-Swift-中使-Objective-C-接口不可用"><a href="#在-Swift-中使-Objective-C-接口不可用" class="headerlink" title="在 Swift 中使 Objective-C 接口不可用"></a>在 Swift 中使 Objective-C 接口不可用</h3><p>一些 Objective-C 接口可能不适合或不需要作为 Swift 接口公开。要防止 Swift 导入 Objective-C 声明，请使用 <code>NS_SWIFT_UNAVAILABLE</code> 宏，并将消息传递给 API 调用者以使其可使用可能存在的其它替代方法。</p>
<p>例如，一个 Objective-C 类提供了一个方便的初始值设定项，它为键 - 值对提供可变参数，可能会建议 Swift 使用者使用字典文字：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)collectionWithValues:(<span class="built_in">NSArray</span> *)values forKeys:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSCopying</span>&gt; *)keys <span class="built_in">NS_SWIFT_UNAVAILABLE</span>(<span class="string">"Use a dictionary literal instead"</span>);</div></pre></td></tr></table></figure>
<p>试图从 Swift 代码中调用 <code>+ collectionWithValues:forKeys:</code> 方法会导致编译器错误。</p>
<p>要在编译时在 Swift 和 Objective-C 中使 Objective-C 声明不可用，请使用 <code>NS_UNAVAILABLE</code> 宏。该宏的行为与 <code>NS_SWIFT_UNAVAILABLE</code> 宏类似，只是它省略了可定制的错误消息，并且它限制了 Objective-C 代码中对声明的编译时访问。</p>
<h3 id="将可用性信息添加到-Objective-C-API"><a href="#将可用性信息添加到-Objective-C-API" class="headerlink" title="将可用性信息添加到 Objective-C API"></a>将可用性信息添加到 Objective-C API</h3><p>在 Swift 中，可以用 <code>@available</code> 属性来控制在为特定目标平台构建应用程序时是否可以使用。同样，你可以使用可用条件 <code>#available</code> 根据所需的平台和版本条件有条件地执行代码。</p>
<p>Objective-C 中提供了两种可用性说明符，使用以下示例中显示的相应语法。</p>
<p>此示例显示 Swift 中的声明中使用的可用性信息：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">11</span>, macOS <span class="number">10.13</span>, *)</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">newMethod</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// Use iOS 11 APIs.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是 Objective-C 中添加相同可用性信息的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyViewController</span> : <span class="title">UIViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)newMethod API_AVAILABLE(ios(<span class="number">11</span>), macosx(<span class="number">10.13</span>));</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>下面的例子显示了 Swift 条件语句中使用的可用性信息：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> #available(iOS <span class="number">11</span>, *) &#123;</div><div class="line">	<span class="comment">// Use iOS 11 APIs.</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// Alternative code for earlier versions of iOS.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是 Objective-C 中如何使用相同的可用性信息：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11</span>, *)) &#123;</div><div class="line">	<span class="comment">// Use iOS 11 APIs.</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// Alternative code for earlier versions of iOS.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有关指定平台可用性的更多信息，请参阅 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097" target="_blank" rel="external">Swift 编程语言（Swift 4.1）</a>中的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html#//apple_ref/doc/uid/TP40014097-CH35-ID348" target="_blank" rel="external">声明属性</a>。</p>
<h3 id="命名你的产品模块"><a href="#命名你的产品模块" class="headerlink" title=" 命名你的产品模块"></a><a id="Naming_Your_Product_Module"></a> 命名你的产品模块</h3><p>Swift 代码生成的 Xcode 生成头文件的名称以及 Xcode 为你创建的 Objective-C 桥接头名称是从你的产品模块名称中生成的。默认情况下，你的产品模块名称与你的产品名称相同。但是，如果你的产品名称包含任何非字母数字字符（如句点（.）），则它们将替换为产品模块名称中的下划线（_）。如果名称以数字开头，则第一个数字将替换为下划线。</p>
<p>你还可以为产品模块名称提供自定义名称，Xcode 将在命名桥接和生成的标头时使用此名称。为此，请更改 “Product Module Name” 构建设置。</p>
<blockquote>
<p>注意<br>你无法覆盖框架的产品模块名称。</p>
</blockquote>
<h3 id="常见问题解答和提醒"><a href="#常见问题解答和提醒" class="headerlink" title="常见问题解答和提醒"></a>常见问题解答和提醒</h3><ul>
<li>将你的 Swift 和 Objective-C 文件视为同一代码集合，并注意命名冲突。</li>
<li>如果你正在使用框架，请确保打包下的 “Defines Module”（DEFINES_MODULE）构建设置设置为 “Yes”。</li>
<li>如果你正在使用 Objective-C 桥接头，请确保 Swift 编译器 - 代码生成下的 Objective-C 桥接头（SWIFT_OBJC_BRIDGING_HEADER）编译设置设置为相对于你的项目的桥接头文件的路径（例如，”MyApp的/MyApp的桥接-Header.h”）。</li>
<li>在为你的 Swift 代码命名 Objective-C 桥接标题和生成的标题时，Xcode 使用你的产品模块名称（PRODUCT_MODULE_NAME） -不是你的目标名称（TARGET_NAME）。有关产品模块命名的信息，请参阅 <a href="#Naming_Your_Product_Module">命名你的产品模块</a>。</li>
<li>要在 Objective-C 中可访问和使用，Swift 类必须是Objective-C 类的子类（descendant），或者必须标记为 <code>@objc</code>。</li>
<li>当你将 Swift 代码导入到 Objective-C 时，请记住 Objective-C 将无法翻译特定于 Swift 的某些功能。有关列表，请参阅<a href="#Using_Swift_from_Objective-C">从 Objective-C 使用 Swift</a>。</li>
<li>如果在 Swift 代码中使用自己的 Objective-C 类型，请确保在将 Swift 生成的头文件导入要使用 Swift 代码的 Objective-C .m 文件中之前，为这些类型导入 Objective-C 头文件。</li>
<li>使用 <code>private</code> 或 <code>fileprivate</code> 修饰符标记的 Swift 声明不会出现在生成的头文件中。除非明确用 <code>@IBAction</code>，<code>@IBOutlet</code> 或 <code>@objc</code> 标记私有声明，否则它们不会暴露给 Objective-C。</li>
<li>对于应用程序 Target，如果应用程序 Target 具有 Objective-C 桥接标头，则使用 <code>internal</code> 修饰符标记的声明将出现在生成的标头中。</li>
<li>对于框架 Target，只有具有 <code>public</code> 或 <code>open</code> 修饰符的声明出现在生成的头文件中。只要它们在继承自 Objective-C 类的类中声明，仍然可以使用框架的 Objective-C 部分由 <code>internal</code> 修饰符标记的 Swift 方法和属性。有关访问级别修饰符的更多信息，请参阅 <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097" target="_blank" rel="external">Swift 编程语言（Swift 4.1）</a>中的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41" target="_blank" rel="external">访问控制</a>。</li>
</ul>
<h4 id="译自苹果官方编程指南：Swift-and-Objective-C-in-the-Same-Project"><a href="#译自苹果官方编程指南：Swift-and-Objective-C-in-the-Same-Project" class="headerlink" title="译自苹果官方编程指南：Swift and Objective-C in the Same Project"></a><strong><em>译自苹果官方编程指南：<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-ID136" target="_blank" rel="external">Swift and Objective-C in the Same Project</a></em></strong></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20171002-00-blog.png?imageView/2/w/600/q/80&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Swift 与 Objective-C 的兼容性使你可以创建一个包含
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/categories/iOS/Swift/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="混编" scheme="http://yoursite.com/tags/%E6%B7%B7%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>上传自己的 CocoaPods 依赖库</title>
    <link href="http://yoursite.com/2017/09/03/cocoaPods-notes/"/>
    <id>http://yoursite.com/2017/09/03/cocoaPods-notes/</id>
    <published>2017-09-03T01:19:57.000Z</published>
    <updated>2017-09-24T13:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-00-blog.png" alt="(官方)依赖包上传流程"></p>
<p>最近写的工具类 <a href="https://github.com/Kejiasir/YYRSACrypto" target="_blank" rel="external">YYRSACrypto</a> 在上传到 CocoaPods 管理的时候遇到一些问题，在这记录下解决的过程。<br>相信对于 iOS 开发者来说 <a href="https://cocoapods.org/" target="_blank" rel="external">CocoaPods</a> 并不陌生，这是一个管理 Objective-C 和 Swift 项目第三方框架或组件非常方便的工具，使用 CocoaPods 管理可以帮助我们很轻松的导入第三方框架的源码到项目中，同时自动为项目添加一些必要的额外配置，而当框架更新版本时使用 <code>pod update</code> 命令便可下载最新的代码，简直不要太好用。所以，我的原则是，第三方能使用 CocoaPods 管理的绝不手动导入。</p>
<p>关于 CocoaPods 的安装就不说了，网上的资料已经很多；讲下如何编写自己项目的 spec 文件吧，当你写了一个组件或者框架想开源给别人用的时候，简单的上传到 github 仓库给人下载就可以了，但如果要像其它（比如：AFNetworking，SDWebImage，…）框架那样提供 CocoaPods 的方式给人安装该怎么做呢 ？ 接下来就说说步骤。</p>
<h4 id="一：首先在-GitHub-新建一个-Repository-并-Clone-到本地。"><a href="#一：首先在-GitHub-新建一个-Repository-并-Clone-到本地。" class="headerlink" title="一：首先在 GitHub 新建一个 Repository 并 Clone 到本地。"></a>一：首先在 GitHub 新建一个 Repository 并 Clone 到本地。</h4><h4 id="二：在-Xcode-新建一个同名的-Project-到-Clone-的-Repository-文件夹下。"><a href="#二：在-Xcode-新建一个同名的-Project-到-Clone-的-Repository-文件夹下。" class="headerlink" title="二：在 Xcode 新建一个同名的 Project 到 Clone 的 Repository 文件夹下。"></a>二：在 Xcode 新建一个同名的 Project 到 Clone 的 Repository 文件夹下。</h4><h4 id="三：将你的框架源代码单独包装到一个文件夹中，文件夹的名称就是你的框架名称。"><a href="#三：将你的框架源代码单独包装到一个文件夹中，文件夹的名称就是你的框架名称。" class="headerlink" title="三：将你的框架源代码单独包装到一个文件夹中，文件夹的名称就是你的框架名称。"></a>三：将你的框架源代码单独包装到一个文件夹中，文件夹的名称就是你的框架名称。</h4><p>cd 到项目所在目录，在终端输入以下命令创建一个自动扩展名为 <code>.podspec</code> 的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># &lt;your_framework_name&gt; 你的框架名称，比如 YYRSACrypto。</div><div class="line">$ pod spec create &lt;your_framework_name&gt;</div></pre></td></tr></table></figure>
<p>Tips：<code>.podspec</code> 文件最好是和你的框架文件夹放在同级目录下，如下图我的项目示例：</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-01-blog.png" alt=""></p>
<p>注意：<code>.podspec</code> 是一个非常重要的文件，我们需要打开它进行相关的信息配置，这个文件可以使用本地编辑器打开，但！后面验证 spec 文件的时候会发生一些非常奇怪的错误导致无法验证通过。<strong><em>所以，强烈建议，在编码完成后一并 push 到 github 上再进行编辑这个文件，完事再 pull 下来。</em></strong></p>
<h4 id="四：配置-podspec-文件，里面包含很多配置字段和说明，可按需配置，无用的可以删除，但有些是必不可少的，下面是我的项目配置示例，你也可以参考其它开源项目的-podspec-文件来填写。"><a href="#四：配置-podspec-文件，里面包含很多配置字段和说明，可按需配置，无用的可以删除，但有些是必不可少的，下面是我的项目配置示例，你也可以参考其它开源项目的-podspec-文件来填写。" class="headerlink" title="四：配置 .podspec 文件，里面包含很多配置字段和说明，可按需配置，无用的可以删除，但有些是必不可少的，下面是我的项目配置示例，你也可以参考其它开源项目的 .podspec 文件来填写。"></a>四：配置 <code>.podspec</code> 文件，里面包含很多配置字段和说明，可按需配置，无用的可以删除，但有些是必不可少的，下面是我的项目配置示例，你也可以参考其它开源项目的 <code>.podspec</code> 文件来填写。</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> |s| </div><div class="line">  s.name         = <span class="string">"YYRSACrypto"</span> </div><div class="line">  s.version      = <span class="string">"0.0.1"</span> </div><div class="line">  s.summary      = <span class="string">"基于 MIHCrypto 封装的 RSA 加密解密工具类."</span> </div><div class="line">  s.description  = &lt;&lt;-DESC </div><div class="line">                  基于 MIHCrypto 封装的 RSA 加密解密工具类, 加密解密, 只需要一句代码就能实现. </div><div class="line">                   DESC </div><div class="line">  s.homepage     = <span class="string">"https://github.com/Kejiasir/YYRSACrypto"</span> </div><div class="line">  s.license      = <span class="string">"MIT"</span> </div><div class="line">  s.author       = &#123; <span class="string">"Arvin"</span> =&gt; <span class="string">"yasir86@126.com"</span> &#125;  </div><div class="line">  s.platform     = :ios, <span class="string">"6.0"</span>  </div><div class="line">  s.source       = &#123; :git =&gt; <span class="string">"https://github.com/Kejiasir/YYRSACrypto.git"</span>, :tag =&gt; <span class="string">"#&#123;s.version&#125;"</span> &#125; </div><div class="line">  s.source_files = <span class="string">"YYRSACrypto"</span>, <span class="string">"YYRSACrypto/YYRSACrypto/*.&#123;h,m&#125;"</span>  </div><div class="line">  s.requires_arc = <span class="literal">true</span>  </div><div class="line">  s.dependency <span class="string">"MIHCrypto"</span>, <span class="string">"~&gt; 0.4.1"</span> </div><div class="line">  s.dependency <span class="string">"GTMBase64"</span>, <span class="string">"~&gt; 1.0.0"</span>  </div><div class="line">end</div></pre></td></tr></table></figure>
<p>一些必要字段的说明：</p>
<p><code>s.name</code>             库的名称；<br><code>s.summary</code>         库的简要描述；<br><code>s.version</code>         库源代码的版本；<br><code>s.homepage</code>         库的主页；<br><code>s.author</code>             库的作者；<br><code>s.description</code>     库的其它描述；（非必须）<br><code>s.license</code>         所采用的开源许可协议；<br><code>s.platform</code>         库支持的系统平台及最低兼容版本；<br><code>s.requires_arc</code> 是否使用 ARC, <code>true</code> 表示 YES, <code>flase</code> 则表示 NO；<br><code>s.dependency</code>     如果你的库需要依赖其它的库，填写此字段，下载的时候会一并下载这个字段中所填写的库，可以填写多个；<br><code>s.source</code>             库源代码地址，后面的 Tag 是每更新一个 Release 版本时的标签，注意：每个版本的 Tag 需要与 <code>s.version</code> 声明的一致；<br><code>s.source_files</code> 是包含库所有源代码的目录，以上面的格式为例，前面的 <code>&quot;YYRSACrypto&quot;</code> 可写可不写，后面的 <code>YYRSACrypto/YYRSACrypto/</code> 是一个相对路径，目录的层级关系一定要和（本地及远程）代码库的保持一致，最后 <code>*.{h,m}</code> 则是一个类似正则表达式的字符串，表示匹配这个目录下所有以 <code>.h</code> 和 <code>.m</code> 为扩展名的文件。</p>
<p><strong><em>注意：<code>s.source_files</code> 字段一点要填写正确路径，否则验证的时候会报错提示找不到文件</em></strong></p>
<hr>
<h4 id="PS：先说下-git-打标签的命令吧，一般提交一个-Release-版本都会新建一个-Tag，所以上面的-s-version-版本号即为当前最新的-Tag-版本。"><a href="#PS：先说下-git-打标签的命令吧，一般提交一个-Release-版本都会新建一个-Tag，所以上面的-s-version-版本号即为当前最新的-Tag-版本。" class="headerlink" title="PS：先说下 git 打标签的命令吧，一般提交一个 Release 版本都会新建一个 Tag，所以上面的 s.version 版本号即为当前最新的 Tag 版本。"></a>PS：先说下 git 打标签的命令吧，一般提交一个 Release 版本都会新建一个 Tag，所以上面的 <code>s.version</code> 版本号即为当前最新的 Tag 版本。</h4><p>常用的打标签方式有两种：</p>
<ul>
<li>第一，含附注的标签</li>
<li>创建一个含附注类型的标签非常简单，用 -a (取annotated的首字母) 指定标签名字即可。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># -m 则指定了对应的标签说明，git 会将此说明一同保存在标签对象中，类似 commit 代码时附带的 -m 日志</div><div class="line">$ git tag -a 0.0.1 -m &apos;my version 0.0.1&apos;</div><div class="line"></div><div class="line"># 用此命令查看相应标签的版本信息，并连同显示打标签时的提交对象</div><div class="line">$ git show</div></pre></td></tr></table></figure>
<ul>
<li>第二，轻量级标签，比较常用的方式</li>
<li>轻量级标签，实际上就是一个保存着对应提交对象的校验和信息的文件，后面不附带其它信息。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag 0.0.1</div></pre></td></tr></table></figure>
<p>打完标签需要将标签推送到远程服务器，默认情况下，<code>git push</code> 并不会把标签推送到远程服务器上，需要通过显式命令才能推送到远程仓库，其命令格式如同推送分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin 0.0.1</div></pre></td></tr></table></figure>
<hr>
<h4 id="五：配置-podspec-后，下一步验证库"><a href="#五：配置-podspec-后，下一步验证库" class="headerlink" title="五：配置 .podspec 后，下一步验证库"></a>五：配置 <code>.podspec</code> 后，下一步验证库</h4><p>使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<p>或者这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod spec lint</div></pre></td></tr></table></figure></p>
<p>只有验证通过才能 push 到 CocoaPods 上。</p>
<p>这里说下验证时遇到的几个错误：</p>
<ul>
<li>第一：当这个问题实在找不到原因时，请先仔细检查 <code>.podspec</code> 文件配置信息是否填写正确，如果确认没问题但依然报错，建议把 <code>.podspec</code> 文件删掉，重新 Create 。</li>
</ul>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-02-blog.png" alt=""></p>
<ul>
<li>第二：库的依赖库（OpenSSL-Universal）中包含 <code>.a</code> 的静态库文件，CocoaPods 表示不允许，需要使用动态库或者框架，参考 <a href="https://github.com/CocoaPods/CocoaPods/issues/3583" target="_blank" rel="external">这条 issue</a> 的解决方案。</li>
</ul>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-03-blog.png" alt=""></p>
<ul>
<li>第三：下面这个错误在网上找到的解决方案不适用，我的方案是把 CocoaPods 升级到最新版本；当前 CocoaPods 最新版本为 <code>1.3.1</code>。</li>
</ul>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-04-blog.png" alt=""></p>
<p>查看 CocoaPods 版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod --version</div></pre></td></tr></table></figure></p>
<p>升级使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gem install cocoapods</div></pre></td></tr></table></figure></p>
<h4 id="六：提交库到-CocoaPods"><a href="#六：提交库到-CocoaPods" class="headerlink" title="六：提交库到 CocoaPods"></a>六：提交库到 CocoaPods</h4><p>说明：<a href="http://blog.cocoapods.org/CocoaPods-Trunk/#transition" target="_blank" rel="external">Trunk</a> 服务需要 CocoaPods 版本 <code>0.33</code> 以上才能使用，所以建议升级到最新版本以避免未知的错误。</p>
<p>第一次提交之前需要先注册 <code>Trunk</code>，使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 下面的命令是我注册使用的，你需要把邮箱和名字以及描述替换成你的，加上--verbose可以输出详细的debug信息，方便发生错误时查看。</div><div class="line">$ pod trunk register  arvinSir.86@gmail.com &apos;arvin&apos; --description=&apos;macbook pro&apos; --verbose</div></pre></td></tr></table></figure></p>
<p>注册后 CocoaPods 会向你的邮箱发送验证链接，验证注册成功后才能继续以下的操作。<br>注册成功后可使用以下命令来查看自己的注册信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk me</div></pre></td></tr></table></figure></p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-05-blog.png" alt=""></p>
<p>最后，上传库，使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk push YYRSACrypto.podspec --use-libraries</div></pre></td></tr></table></figure></p>
<p>OK，再次出现错误，仔细看，<code>pod trunk push</code> 命令默默的又做了一次验证，某些文件被警告导致验证无法通过，但后面继续提示我们可以使用 <code>--allow-warnings</code> 来忽略警告；使用 <code>--use-libraries</code> 表示忽略依赖库中包含静态库（<code>.a</code> 文件）所导致的错误。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170903-06-blog.png" alt=""></p>
<p>所以，完整的 <code>push</code> 命令如下（建议使用）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk push YYRSACrypto.podspec --allow-warnings --use-libraries</div></pre></td></tr></table></figure></p>
<p>没有意外，提交成功后终端命令行将输出如下信息：<br><img src="http://oonis1a4c.bkt.clouddn.com/20170903-09-blog.png" alt=""></p>
<p>👏 恭喜！现在就请使用 <code>pod search</code> 命令来查找你的库吧！</p>
<p>如果找不到，先别急，使用以下命令来更新下即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod setup</div></pre></td></tr></table></figure></p>
<p><strong>结尾：</strong>如果后续需要更新库，记得须重新打个 Tag 并 <code>push</code> 到远程服务端，再把 <code>.podspec</code> 文件中的 <code>s.version</code> 字段更新下，然后使用上面的 <code>pod trunk push</code> 命令提交即可；同样的如果使用 <code>pod search</code> 命令查找不到最新提交的版本，使用 <code>pod setup</code> 命令更新下就好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170903-00-blog.png&quot; alt=&quot;(官方)依赖包上传流程&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近写的工具类 &lt;a href=&quot;https://github.com/Kejiasir/Y
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
      <category term="CocoaPods" scheme="http://yoursite.com/categories/Technology/CocoaPods/"/>
    
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>使用 openSSL 生成 RSA 秘钥对</title>
    <link href="http://yoursite.com/2017/08/21/rsa-crypto-notes/"/>
    <id>http://yoursite.com/2017/08/21/rsa-crypto-notes/</id>
    <published>2017-08-21T07:49:25.000Z</published>
    <updated>2017-09-20T03:39:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170821-00-blog.png" alt=""></p>
<p>最近好忙啊，公司开了新的项目，所以博客也没啥时间更新呢！遇到一个新的需求，需要由客户端生成 <strong><em>RSA</em></strong> 秘钥对，然后把公钥发送给 <strong><em>Java</em></strong> 服务器端，本来想着挺简单呀，终端几行命令就可以生成密钥对，导进项目就 OK 了！但是工头说必须每个客户端生成的密钥对都不一样，那就意味着需要由客户端使用代码生成了，硬着头皮研究了几天，最终把问题解决了，所以抽时间来记录下。</p>
<p>关于 <a href="https://www.openssl.org/" target="_blank" rel="external">OpenSSL</a>，这是一个强大的加密库，使用纯 C 语言编写，可以跨平台使用，网上更多的资料大都是使用终端命令操作来生成密钥对，对于使用代码生成的案例基本少之又少。所以，还是乖乖查看官方文档吧。</p>
<p><strong>Tips：</strong>建议先在项目中导入 <a href="https://github.com/openssl/openssl" target="_blank" rel="external">openssl</a>，支持 CocoaPods 集成，这样方便结合文档直接在对应的文件中查找接口。</p>
<p>在 <code>#include &lt;openssl/rsa.h&gt;</code> 头文件中找到以下函数生成密钥对：</p>
<h5 id="一-nbsp-这是被标记为弃用的函数，不建议使用，生成错误的密钥对或者为-NULL-的几率很大"><a href="#一-nbsp-这是被标记为弃用的函数，不建议使用，生成错误的密钥对或者为-NULL-的几率很大" class="headerlink" title="一.&nbsp; 这是被标记为弃用的函数，不建议使用，生成错误的密钥对或者为 NULL 的几率很大"></a>一.&nbsp; 这是被标记为弃用的函数，不建议使用，生成错误的密钥对或者为 <strong><em>NULL</em></strong> 的几率很大</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Deprecated version */</span></div><div class="line"><span class="meta"># ifndef OPENSSL_NO_DEPRECATED</span></div><div class="line">RSA *RSA_generate_key(<span class="keyword">int</span> bits, <span class="keyword">unsigned</span> <span class="keyword">long</span> e, <span class="keyword">void</span></div><div class="line">                       (*callback) (<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">void</span> *), <span class="keyword">void</span> *cb_arg);</div><div class="line"><span class="meta"># endif                         /* !defined(OPENSSL_NO_DEPRECATED) */</span></div></pre></td></tr></table></figure>
<h5 id="二-nbsp-新的函数，替换-RSA-generate-key（），返回一个整型值，成功返回-1，-错误返回-0"><a href="#二-nbsp-新的函数，替换-RSA-generate-key（），返回一个整型值，成功返回-1，-错误返回-0" class="headerlink" title="二.&nbsp; 新的函数，替换 RSA_generate_key（），返回一个整型值，成功返回 1， 错误返回 0"></a>二.&nbsp; 新的函数，替换 <code>RSA_generate_key（）</code>，返回一个整型值，成功返回 1， 错误返回 0</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  New version！生成 RSA 密钥对</div><div class="line">     </div><div class="line">  @param rsa  存储生成的秘钥对的 RSA 结构体指针</div><div class="line">  @param bits 模数大小，通常为 128（1024 bit）位</div><div class="line">  @param e    公共指数，通常为 3，17 或 65537</div><div class="line">  @param cb   填 NULL 即可</div><div class="line">     </div><div class="line">  @return 结果（整型值），成功返回 1，错误返回 0</div><div class="line">*/</div><div class="line"><span class="keyword">int</span> RSA_generate_key_ex(RSA *rsa, <span class="keyword">int</span> bits, BIGNUM *e, BN_GENCB *cb);</div></pre></td></tr></table></figure>
<p>关于 ‘生成密钥对’ 接口更详细的描述，请查看 <a href="https://www.openssl.org/docs/man1.1.0/crypto/RSA_generate_key.html" target="_blank" rel="external">官方文档</a>。</p>
<p><strong><em>核心代码：</em></strong></p>
<p>需导入 <code>#import &lt;openssl/rsa.h&gt;</code> 和 <code>#import &lt;openssl/pem.h&gt;</code> 这两个头文件。</p>
<p><strong><em>一：生成 RSA 密钥对，提取出公钥和私钥通过 RSA 二级结构体指针保存起来</em></strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 生成 rsa key */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> rsa_generate_key(RSA **public_key, RSA **private_key) &#123;</div><div class="line">    BIGNUM *a = BN_new();</div><div class="line">    BN_set_word(a, <span class="number">65537</span>);</div><div class="line">    <span class="keyword">@try</span> &#123;</div><div class="line">        RSA *rsa = RSA_new();</div><div class="line">        <span class="comment">/// returns 1 on success or 0 on error.</span></div><div class="line">        <span class="keyword">int</span> result = RSA_generate_key_ex(rsa, <span class="number">1024</span>, a, <span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">/// extract public key and private key</span></div><div class="line">            *public_key  = RSAPublicKey_dup(rsa);</div><div class="line">            *private_key = RSAPrivateKey_dup(rsa);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        RSA_free(rsa);</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">bool</span>)result;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">@finally</span> &#123;</div><div class="line">        <span class="comment">/// freed</span></div><div class="line">        BN_free(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>二：取公钥和私钥地址读出 PEM 格式的公钥和私钥字符串</em></strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 读取 pem key */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> get_pem_key(cStrBlock block, RSA *rsa, <span class="keyword">bool</span> isPublicKey, <span class="keyword">bool</span> isPkcs8) &#123;</div><div class="line">    <span class="keyword">if</span> (!rsa) <span class="keyword">return</span>;</div><div class="line">    BIO *bp = BIO_new(BIO_s_mem());</div><div class="line">    <span class="keyword">int</span> keylen; <span class="keyword">char</span> *pem_key;</div><div class="line">    <span class="keyword">@try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (!isPublicKey) &#123;</div><div class="line">            EVP_PKEY *key = EVP_PKEY_new();</div><div class="line">            EVP_PKEY_assign_RSA(key, rsa);</div><div class="line">            <span class="keyword">if</span> (!isPkcs8)   <span class="comment">/// PKCS#1</span></div><div class="line">                PEM_write_bio_RSAPrivateKey(bp, rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">else</span>    <span class="comment">/// PKCS#8</span></div><div class="line">                PEM_write_bio_PrivateKey(bp, key, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">/// PKCS#8</span></div><div class="line">            PEM_write_bio_RSA_PUBKEY(bp, rsa);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        keylen = BIO_pending(bp);</div><div class="line">        pem_key = calloc(keylen + <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        BIO_read(bp, pem_key, keylen);</div><div class="line">        </div><div class="line">        !block ?: block(pem_key);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">@finally</span> &#123;</div><div class="line">        BIO_free_all(bp);</div><div class="line">        RSA_free(rsa);</div><div class="line">        free(pem_key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>生成的 pem key 标准格式为 PKCS#1，一般 <strong><em>Java</em></strong> 服务器需要使用的格式为 PKCS#8;</li>
<li>区别：<ul>
<li>PKCS#1：定义了 RSA 公钥函数的基本格式标准，特别是数字签名。它定义了数字签名如何计算，包括待签名数据和签名本身的格式；它也定义了 PSA 公/私钥的语法。</li>
<li>PKCS#8：私钥信息语法标准。PKCS#8 定义了私钥信息语法和加密私钥语法，其中私钥加密使用了PKCS#5 标准。</li>
</ul>
</li>
</ul>
<p><strong><em>注意：</em></strong><br><strong><em>以上结构体指针和内存分配操作，在作用域结束后，必须要释放，否则会引起内存泄露。</em></strong></p>
<p>通过以上两个函数，就成功生成了我们所需要的公钥和私钥（char *类型）字符串，使用的时候需要转换为 NSSting 类型！一定记得不要使用 <code>RSA_generate_key()</code> 这个函数，一开始使用这个函数生成的密钥对要么就是错误的，要么就是 NULL。</p>
<p>那么如何检查生成的密钥对是否正确并且能使用？可以用 <a href="http://travistidwell.com/jsencrypt/example.html" target="_blank" rel="external">这个网站测试</a>，将生成的 pem key 拷贝过去，点击下方的 <code>Test Me!!!</code> 按钮，如果正确弹窗会显示 <code>It works!!!</code>，错误显示 <code>Something went wrong...</code>。</p>
<p>拿到公钥私钥了，那怎么加密解密呢？同样的在 <code>rsa.h</code> 头文件中定义了下面几个函数：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* next 4 return -1 on error */</span></div><div class="line"><span class="comment">/// 公钥加密</span></div><div class="line"><span class="keyword">int</span> RSA_public_encrypt(<span class="keyword">int</span> flen, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *from,</div><div class="line">                       <span class="keyword">unsigned</span> <span class="keyword">char</span> *to, RSA *rsa, <span class="keyword">int</span> padding);</div><div class="line"><span class="comment">/// 私钥加密</span></div><div class="line"><span class="keyword">int</span> RSA_private_encrypt(<span class="keyword">int</span> flen, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *from,</div><div class="line">                        <span class="keyword">unsigned</span> <span class="keyword">char</span> *to, RSA *rsa, <span class="keyword">int</span> padding);</div><div class="line"><span class="comment">/// 公钥解密                        </span></div><div class="line"><span class="keyword">int</span> RSA_public_decrypt(<span class="keyword">int</span> flen, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *from,</div><div class="line">                       <span class="keyword">unsigned</span> <span class="keyword">char</span> *to, RSA *rsa, <span class="keyword">int</span> padding);</div><div class="line"><span class="comment">/// 私钥解密</span></div><div class="line"><span class="keyword">int</span> RSA_private_decrypt(<span class="keyword">int</span> flen, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *from,</div><div class="line">                        <span class="keyword">unsigned</span> <span class="keyword">char</span> *to, RSA *rsa, <span class="keyword">int</span> padding);</div></pre></td></tr></table></figure>
<p>由于 OpenSSL 是纯 C 语言编写，以上四个函数使用有点难度，😳 没有找到正确的方法；但在这个过程中，我找到了 <a href="https://github.com/hohl/MIHCrypto" target="_blank" rel="external">MIHCrypto</a> 这个非常 niubility 的库，这是一个基于 OpenSSL 部分功能封装的更加面向对象的加密类库。目前支持以下加密方式：</p>
<ul>
<li><code>AES</code> (block cipher)</li>
<li><code>BIGNUM</code> (discrete mathematics)</li>
<li><code>DES</code> (block cipher)</li>
<li><code>MD5</code> (hash algorithm)</li>
<li><code>RSA</code> (public-key cryptography)</li>
<li><code>SHA, SHA256, SHA384, SHA512</code> (hash algorithm)</li>
</ul>
<p>所有的密码类通过协议来实现秘钥生成和加密解密： </p>
<ul>
<li><code>MIHKeyFactory</code> - 用于生成新的密钥。</li>
<li><code>MIHSymmetricKey</code> - 表示对称密钥（如AES或DES），可用于加密和解密数据。</li>
<li><code>MIHPublicKey</code> - 表示公钥（如RSA PUBKEY），可用于加密数据并验证签名。</li>
<li><code>MIHPrivateKey</code> - 表示私钥（如RSA私钥），可用于解密数据和签名消息。</li>
<li><code>MIHHashAlgorithm</code> - 表示哈希功能，只有一种方法来创建传递的数据的哈希和。</li>
</ul>
<p><strong><em>示例代码：</em></strong></p>
<p>生成秘钥对，保存到一个密钥对容器中，包含公钥和私钥。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// generate rsa key </span></div><div class="line">MIHRSAKeyFactory *keyFactory = [[MIHRSAKeyFactory alloc] init];</div><div class="line"><span class="comment">/// set key size</span></div><div class="line">[keyFactory setPreferedKeySize:MIHRSAKey1024];</div><div class="line"><span class="comment">/// key pair Container</span></div><div class="line">MIHKeyPair *keyPair = [keyFactory generateKeyPair];</div></pre></td></tr></table></figure>
<p>加密解密使用方法，几行代码就能实现。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// private encrypt</span></div><div class="line"><span class="built_in">NSError</span> *encryptionError = <span class="literal">nil</span>;</div><div class="line"><span class="built_in">NSData</span> *data = [<span class="string">@"message"</span> dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"><span class="built_in">NSData</span> *encryptData = [keyPair.private encrypt:data error:&amp;encryptionError];</div><div class="line"></div><div class="line"><span class="comment">/// public decrypt</span></div><div class="line"><span class="built_in">NSError</span> *decryptionError = <span class="literal">nil</span>;</div><div class="line"><span class="built_in">NSData</span> *data = encryptData; <span class="comment">/// encrypted binary data</span></div><div class="line"><span class="built_in">NSData</span> *decryptData = [keyPair.public decrypt:data error:&amp;decryptionError];</div></pre></td></tr></table></figure>
<p>有关更多的使用和接口说明，请查看 <a href="http://cocoadocs.org/docsets/MIHCrypto/0.4.1/" target="_blank" rel="external">接口文档</a>。</p>
<p>嗯，所以最终是使用 MIHCrypto 这个库解决了问题。在基于这个库上结合自己的需求封装了一个更简单使用的工具类，屏蔽晦涩的 C 语言，不需要操作 RSA 结构体指针，使用面向对象的编程方式，<a href="https://github.com/Kejiasir/YYRSACrypto" target="_blank" rel="external">基于 MIHCrypto 封装的 RSA 加密解密工具类</a>，支持导入服务器返回的秘钥按需求进行加密或者解密。可以使用 CocoaPods 方式集成到项目。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170821-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近好忙啊，公司开了新的项目，所以博客也没啥时间更新呢！遇到一个新的需求，需要由客户端生成 &lt;strong&gt;&lt;em
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/categories/iOS/Objective-C/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Swift 学习笔记一</title>
    <link href="http://yoursite.com/2017/07/13/swift-notes-01/"/>
    <id>http://yoursite.com/2017/07/13/swift-notes-01/</id>
    <published>2017-07-13T01:21:38.000Z</published>
    <updated>2017-09-20T03:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170713-00-blog.jpg" alt="Swift Logo"></p>
<p>作为iOS开发语言Objective-C的替代者，Swift一经推出便受到火热的学习浪潮，源于更简洁更优雅的语言设计，在语言排行榜上从前两年的十几位快速上升到了今年的前十位。很多公司也已经开始使用Swift语言来开发新的项目，而Apple在此过渡期间也做了一些事，为oc和swift做了桥接文件，使目前的Objective-C项目可以使用Swift来进行混编迭代。 </p>
<p>今年六月的WWDC大会发布了Swift的4.0版本，对于核心语言和标准库做了重大改进，已经越来越稳定，越来越趋于成熟，取代Objective-C看来是指日可待。所以是时候该做好准备get起来了！迎接Swift时代吧~ </p>
<p>最近也尝试用swift混编公司的项目，遇到不少坑，尤其使用CocoaPods导入swift的第三方库遇到的问题无法解决，如swift版本最渴望的网络请求框架<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a>和自动布局框架<a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="external">SnapKit</a>，现在都没办法用，估计是xcode版本问题，有时间再写粗来~；</p>
<p>好了，现在我们还是先来学习基本语法，打好基础。因为电脑OSX系统没有升级，并且xcode 9还是beta版，也安装不了，所以以下学习的都是基于xcode 8环境的swift 3.0语法，和swift 4.0还是有区别的，but don’t worry，后面3.0过渡到4.0障碍肯定不大。</p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="#数据类型"></a>#数据类型</h4><p>基本数据类型<br><code>Int</code> 整型值；<br><code>Float</code> 32位浮点数值；<br><code>Double</code> 64位浮点数值；<br><code>Bool</code> 布尔型值。</p>
<p>文本<br><code>String</code> 是文本字符数据。</p>
<p>集合<br><code>Array</code> 数组：有序数据的集；<br><code>Set</code> 集合：无序无重复数据的集；<br><code>Dictionary</code> 字典：无序的键值对的集。</p>
<h4 id="常量和变量"><a href="#常量和变量" class="headerlink" title="#常量和变量"></a>#常量和变量</h4><p>使用 <code>let</code> 来声明常量，常量的值一旦设定就不能改变。</p>
<p>使用 <code>var</code> 来声明变量，变量的值设定后仍可以随意更改。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义常量，设置值10</span></div><div class="line"><span class="keyword">let</span> i = <span class="number">10</span></div><div class="line">        </div><div class="line"><span class="comment">// 定义变量，设置初始值0</span></div><div class="line"><span class="keyword">var</span> j = <span class="number">0</span></div><div class="line">        </div><div class="line"><span class="comment">// 修改变量值为30</span></div><div class="line">j = <span class="number">30</span></div><div class="line">        </div><div class="line"><span class="built_in">print</span>(i) <span class="comment">// 输出：10</span></div><div class="line">        </div><div class="line"><span class="built_in">print</span>(j) <span class="comment">// 输出：30</span></div></pre></td></tr></table></figure>
<h4 id="类型推导"><a href="#类型推导" class="headerlink" title="#类型推导"></a>#类型推导</h4><p>Swift 是类型安全的，它会在编译的时候进行类型检查，自动根据右侧的代码推断出表达式的类型，当你要处理不同类型的值时，类型检查可以帮你避免错误。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自动推断出Int类型</span></div><div class="line"><span class="keyword">let</span> x = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">// 自动推断出Double类型        </span></div><div class="line"><span class="keyword">let</span> p = <span class="number">3.14159</span></div><div class="line">        </div><div class="line"><span class="comment">// 当推断浮点数的类型时，Swift 总是会选择 Double 而不是Float        </span></div><div class="line"><span class="comment">// 如果表达式中同时出现了整数和浮点数，会被推断为 Double 类型</span></div><div class="line"><span class="comment">// 自动推断出Double类型</span></div><div class="line"><span class="keyword">let</span> r = <span class="number">2</span> + <span class="number">3.14</span></div></pre></td></tr></table></figure>
<h4 id="类型指定（转换）"><a href="#类型指定（转换）" class="headerlink" title="#类型指定（转换）"></a>#类型指定（转换）</h4><p>在Swift中，不同类型的数据之间，是不允许直接运算的，它不会做隐式类型转换；如果需要把一个值转换成其他类型，须显式转换，可以使用：let/var 常量名/变量名 : 类型 = 值，否则会进行自动类型推断。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例一</span></div><div class="line"><span class="keyword">let</span> i = <span class="number">10</span> </div><div class="line"><span class="keyword">var</span> j: <span class="type">Double</span> = <span class="number">0.5</span> </div><div class="line">j = <span class="number">30</span> </div><div class="line"><span class="comment">// 将 j 转换为 Int类型</span></div><div class="line"><span class="built_in">print</span>(i + <span class="type">Int</span>(j)) <span class="comment">// 输出：40</span></div><div class="line"></div><div class="line"><span class="comment">// 例二，使用‘类型（）’包裹需转换的常量或变量转换</span></div><div class="line"><span class="keyword">let</span> label = <span class="string">"The width is"</span></div><div class="line"><span class="keyword">let</span> width = <span class="number">94</span></div><div class="line"><span class="keyword">let</span> widthLabel = label + <span class="type">String</span>(width) </div><div class="line"></div><div class="line"><span class="comment">// 例三，更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠</span></div><div class="line"><span class="keyword">let</span> years = <span class="number">6</span>  </div><div class="line"><span class="keyword">let</span> string = <span class="string">"nicole \(years) years old this year."</span></div></pre></td></tr></table></figure>
<h4 id="待续啊。。。"><a href="#待续啊。。。" class="headerlink" title="待续啊。。。"></a>待续啊。。。</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170713-00-blog.jpg&quot; alt=&quot;Swift Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;作为iOS开发语言Objective-C的替代者，Swift一经推出便受到火热的学习浪潮，源于
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/categories/iOS/Swift/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode的警告及处理，持续更新</title>
    <link href="http://yoursite.com/2017/06/01/xcode-warning-muster/"/>
    <id>http://yoursite.com/2017/06/01/xcode-warning-muster/</id>
    <published>2017-06-01T07:31:06.000Z</published>
    <updated>2017-07-13T03:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170601-00-blog.png" alt="">  </p>
<p>在开发过程中，或者在打包ipa的时候，Xcode的编译器多少总会给出一些警告，虽然看似没啥影响，不会阻止继续编译和链接，也不会导致程序不能运行，但是对于强迫症来说，还是不能容忍的，对于一些能消灭的警告一定尽会可能的消灭掉，避免变成不可预知的错误 。</p>
<p>编码时也应该尽可能的避免产生警告，比如不要只定义不实现方法或变量；不使用标记为废弃的API；或者不要遵守了代理协议却不实现代理方法等；但是项目多少会集成一些第三方框架，copy到项目的能直接修改，如果是使用CocoaPods管理的就没办法了，只能坐等作者更新 。 ヽ(。&gt;д&lt;)ｐ</p>
<h5 id="一-nbsp-第三方-Framework-导致的-Warning"><a href="#一-nbsp-第三方-Framework-导致的-Warning" class="headerlink" title="一.&nbsp; 第三方 Framework 导致的 Warning"></a>一.&nbsp; 第三方 Framework 导致的 Warning</h5><p><img src="http://oonis1a4c.bkt.clouddn.com/20170601-01-blog.png" alt=""></p>
<p>解决方法：<br>参考文章：<a href="http://nixwang.com/2016/05/09/kill-debug-symbol-warnings/" target="_blank" rel="external">消除引入第三方 Framework 导致的 Warning</a> 。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170601-02-blog.png" alt=""></p>
<h5 id="二-nbsp-待续"><a href="#二-nbsp-待续" class="headerlink" title="二.&nbsp; 待续"></a>二.&nbsp; 待续</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170601-00-blog.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;在开发过程中，或者在打包ipa的时候，Xcode的编译器多少总会给出一些警告，虽然看似没啥影响，不会阻止继续编
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>记wkWebview获取网页图片</title>
    <link href="http://yoursite.com/2017/05/27/wkWebview-get-html-img/"/>
    <id>http://yoursite.com/2017/05/27/wkWebview-get-html-img/</id>
    <published>2017-05-27T07:21:12.000Z</published>
    <updated>2017-07-13T03:06:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170527-00-blog.png" alt=""></p>
<p>前段时间有个需求，因为项目中有些banner和资讯列表，点开是网页浏览器，大部分是微信公众号的文章链接，还有一些自己的活动报名网页，需要实现类似微信公众号网页的图片点击可查看功能 。因为项目已经最低支持到 iOS 8，所以全替换成 <a href="https://developer.apple.com/reference/webkit/wkwebview" target="_blank" rel="external"><strong>wkWebview</strong></a> 组件了，这里记录下一些遇到的坑 。</p>
<h5 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h5><p>因为涉及到 <code>native</code> 和 <code>js</code> 的交互，一开始是想让前端同事那边给网页中的图片加点击事件，iOS 这边注册下约定的方法，但是因为有些是微信的公众号文章，所以没办法，为了统一还是需要在 iOS 这边注入 <code>js</code> 代码去遍历 DOM 树中的 img 标签，然后给每个 img 标签加上点击事件 。</p>
<p>参考下面第一篇文章，使用切割跳转 <code>url</code> 方法；因为使用的是 <code>wkWebview</code>，所以在初始化 <code>wkWebview</code> 的时候就注入 <code>js</code> 代码，遍历 img 标签，添加点击事件拿到被点击图片的索引 。当然想要拿到对应图片的 src 也是可以的，但是我只需要被点击的图片索引就好了 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *nativejsSource;</div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">	<span class="comment">/// 从bundle中加载js资源文件，转成oc字符串</span></div><div class="line">	nativejsSource = [<span class="built_in">NSString</span> stringWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"didImageIndex"</span> ofType:<span class="string">@"js"</span>] encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>]; </div><div class="line">&#125;);</div><div class="line"><span class="comment">/// 注入js脚本代码</span></div><div class="line">[userContentController addUserScript:[[<span class="built_in">WKUserScript</span> alloc] initWithSource:nativejsSource injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentStart</span> forMainFrameOnly:<span class="literal">YES</span>]];</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// js 方法，获取被点击的图片索引</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImageIndex</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> objs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</div><div class="line">        objs[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">                           <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                           location.href = <span class="string">"jscallbackoc://didImageIndex_*"</span>+i;</div><div class="line">                           &#125;</div><div class="line">                           &#125;)(i)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> objs.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现下面的 <code>WKNavigationDelegate</code> 代理方法，拦截请求的 <code>url</code>，然后切割处理 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  在发送请求之前，决定是否允许或取消导航</div><div class="line"> *  </div><div class="line"> *  @param webView          调用委托方法的Web视图</div><div class="line"> *  @param navigationAction 有关触发导航请求的动作的描述性信息</div><div class="line"> *  @param decisionHandler  当你的应用程序决定是允许还是取消导航时，要调用的块。 该块接受一个参数，它必须是枚举类型WKNavigationActionPolicy的常量之一。</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler &#123;</div><div class="line">    <span class="keyword">if</span> ([[[navigationAction.request URL] absoluteString] hasPrefix:<span class="string">@"jscallbackoc://"</span>]) &#123;</div><div class="line">        [<span class="keyword">self</span> performJSMethodWithURL:[[navigationAction.request URL] absoluteString] protocolName:<span class="string">@"jscallbackoc://"</span> performViewController:<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">    decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理拦截的 <code>url</code> 字符串 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 捕获到拦截的url，进行切割处理，最终拿到被点击图片的 index</span></div><div class="line">- (<span class="keyword">void</span>)performJSMethodWithURL:(<span class="built_in">NSString</span> *)url protocolName:(<span class="built_in">NSString</span> *)name performViewController:(<span class="built_in">UIViewController</span> *)viewController &#123;</div><div class="line">    <span class="built_in">NSString</span> *path = [url substringFromIndex:name.length];</div><div class="line">    <span class="built_in">NSArray</span> *subPaths = [path componentsSeparatedByString:<span class="string">@"*"</span>];</div><div class="line">    <span class="built_in">NSString</span> *methodName = [[subPaths firstObject] stringByReplacingOccurrencesOfString:<span class="string">@"_"</span> withString:<span class="string">@":"</span>];</div><div class="line">    <span class="built_in">NSArray</span> *params = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> (subPaths.count == <span class="number">2</span>) &#123;</div><div class="line">        params = [[subPaths lastObject] componentsSeparatedByString:<span class="string">@"$"</span>];</div><div class="line">    &#125;</div><div class="line">    [viewController performSelector:<span class="built_in">NSSelectorFromString</span>(methodName) withObjects:params];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - private method</span></div><div class="line">- (<span class="keyword">id</span>)performSelector:(SEL)selector withObjects:(<span class="built_in">NSArray</span> *)objects &#123;</div><div class="line">    </div><div class="line">    <span class="comment">/// 方法签名(对方法的描述)</span></div><div class="line">    <span class="built_in">NSMethodSignature</span> *signature = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodSignatureForSelector:selector];</div><div class="line">    <span class="keyword">if</span> (!signature) &#123;</div><div class="line">        [<span class="built_in">NSException</span> raise:<span class="string">@"严重错误"</span> format:<span class="string">@"(%@)方法找不到"</span>, <span class="built_in">NSStringFromSelector</span>(selector)];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/* NSInvocation : 利用一个NSInvocation对象通过调用方法签名来实现对方法的调用（方法调用者、方法名、方法参数、方法返回值）</span></div><div class="line">     如果仅仅完成这步，和普通的函数调用没有区别，但是关键在于NSInvocation可以对传递进来的selector进行包装，实现可以传递无限多个参数</div><div class="line">     普通的方法调用比如: [self performSelector:&lt;#(SEL)#&gt; withObject:&lt;#(id)#&gt; withObject:&lt;#(id)#&gt;] 顶多只能传递两个参数给selector */</div><div class="line">    </div><div class="line">    <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:signature];</div><div class="line">    <span class="comment">/// 调用者是自己</span></div><div class="line">    [invocation setTarget:<span class="keyword">self</span>];</div><div class="line">    <span class="comment">/// 调用的方法是selector</span></div><div class="line">    [invocation setSelector:selector];</div><div class="line">    </div><div class="line">    <span class="comment">/// 设置参数，可以传递无限个参数</span></div><div class="line">    <span class="comment">/// 除self、_cmd以外的参数个数</span></div><div class="line">    <span class="built_in">NSInteger</span> paramsCount = signature.numberOfArguments - <span class="number">2</span>;</div><div class="line">    <span class="comment">/// 防止函数有参数但是不传递参数时，导致崩溃</span></div><div class="line">    paramsCount = MIN(paramsCount, objects.count);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; paramsCount; i++) &#123;</div><div class="line">        <span class="keyword">id</span> object = objects[i];</div><div class="line">        <span class="keyword">if</span> ([object isKindOfClass:[<span class="built_in">NSNull</span> <span class="keyword">class</span>]])</div><div class="line">            <span class="keyword">continue</span>; <span class="comment">/// 如果传递的参数为null，就不处理了</span></div><div class="line">        </div><div class="line">        <span class="comment">/// +2是因为第一个和第二个参数默认是self和_cmd</span></div><div class="line">        [invocation setArgument:&amp;object atIndex:i + <span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/// 调用方法</span></div><div class="line">    [invocation invoke];</div><div class="line">    <span class="comment">/// 获取返回值</span></div><div class="line">    <span class="keyword">id</span> returnValue = <span class="literal">nil</span>;</div><div class="line">    <span class="comment">/// 有返回值类型，才去获得返回值</span></div><div class="line">    <span class="keyword">if</span> (signature.methodReturnLength) &#123;</div><div class="line">        [invocation getReturnValue:&amp;returnValue];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> returnValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后实现图片点击方法，获取到图片索引 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didImageIndex:(<span class="built_in">NSString</span> *)index &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%zd"</span>,[index integerValue]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上只是实现了点击图片拿到图片索引，但是还没有拿到图片的 <code>url</code>，要想实现网页多图浏览效果，肯定不能点一张拿一张，那就要想办法一次拿到网页中所有图片的 <code>url</code> 存到一个数组，当点击图片的时候从数组中取到对应点击索引的图片来展示就OK了。</p>
<p>这里参考下面的第二篇文章，直接使用Google开源的HTML解析框架 <a href="https://github.com/tracy-e/OCGumbo" target="_blank" rel="external">OCGumbo</a>，基于C语言的封装，面向对象的OC语法，使用方法很简单，类似约束框架 <a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a> 的链式语句查找属性节点，这个文章介绍很详细，这里就不再多说，直接上代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[[[<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]] dataTaskWithRequest:[<span class="built_in">NSMutableURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.URLString]] completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">              <span class="built_in">NSHTTPURLResponse</span> *httpResponse = (<span class="built_in">NSHTTPURLResponse</span> *)response;</div><div class="line">              </div><div class="line">              <span class="keyword">if</span> (httpResponse.statusCode == <span class="number">200</span>) &#123;</div><div class="line">                  </div><div class="line">                  <span class="keyword">if</span> (<span class="keyword">self</span>.imageSrcArray.count) &#123;</div><div class="line">                      [<span class="keyword">self</span>.imageSrcArray removeAllObjects];</div><div class="line">                  &#125;</div><div class="line">                  <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">                  <span class="comment">/// 将网页URL转换成HTML字符串</span></div><div class="line">                  <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.URLString];</div><div class="line">                  <span class="built_in">NSString</span> *htmlStr = [<span class="built_in">NSString</span> stringWithContentsOfURL:url encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">                  OCGumboDocument *document = [[OCGumboDocument alloc] initWithHTMLString:htmlStr];</div><div class="line">                  </div><div class="line">                  <span class="keyword">if</span> (document.Query(<span class="string">@"body"</span>)) &#123;</div><div class="line">                      <span class="keyword">if</span> (document.Query(<span class="string">@"body"</span>).find(<span class="string">@"img"</span>)) &#123;</div><div class="line">                          <span class="comment">/// find(@"img") 望名知意，找到'img'标签，这是一个 OCGumboElement 对象数组</span></div><div class="line">                          <span class="keyword">for</span> (OCGumboElement *element <span class="keyword">in</span> document.Query(<span class="string">@"body"</span>).find(<span class="string">@"img"</span>)) &#123;</div><div class="line">                              <span class="keyword">if</span> (element.attr(<span class="string">@"src"</span>)) &#123;</div><div class="line">                              	  <span class="comment">/// 找到'src'节点添加到数组</span></div><div class="line">                                  [<span class="keyword">self</span>.imageSrcArray addObject:element.attr(<span class="string">@"src"</span>)];</div><div class="line">                              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attr(<span class="string">@"data-src"</span>)) &#123;</div><div class="line">                              	  <span class="comment">/// 微信的是变态的'data-src'节点</span></div><div class="line">                                  [<span class="keyword">self</span>.imageSrcArray addObject:element.attr(<span class="string">@"data-src"</span>)];</div><div class="line">                              &#125;</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;] resume];</div></pre></td></tr></table></figure>
<p>以上代码使用 <code>NSURLSession</code> 添加了一个请求判断，是因为如果网页请求错误，比如404，500等状态时，避免因 <code>OCGumbo</code> 遍历DOM树时找不到节点而导致Crash 。</p>
<p>到此为止，一切顺利，过了一段时间，项目上了一个报名活动，后台那边debug时发现iOS这边点击报名连续发了三次请求，而安卓那边不会，那么问题看来是出在iOS这边的代码 。经过和后台那边的调试发现所有的网页请求都会进三次断点，于是写了个简单的Demo测试只加载网页，发现并不会向后台发送三次请求[捂脸]。这样一来大概知道了问题出在哪里，一定是和获取网页图片有关，使用简单粗暴的注释大法，把上面有关代码逐步注释掉，发现是 <code>OCGumbo</code> 出了问题（误会了，其实并不是[委屈]）。直到最后找出真相：</p>
<p>第一次：<code>wkWebview</code> 正常加载网页请求；<br>第二次：使用 <code>NSURLSession</code> 发了一次请求，用于判断网页加载状态；<br>第三次：在将请求 <code>url</code> 转成HTML字符串的时候，会向后台发送一次请求，就是下面这个方法：（表示百思不得其解，但是确确实实是因为它而多发了第三次请求）</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *htmlStr = [<span class="built_in">NSString</span> stringWithContentsOfURL:url encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div></pre></td></tr></table></figure>
<p>基于上述问题，在不使用 <code>NSURLSession</code> 加判断和通过转换 <code>url</code> 为HTML字符串的情况下，放弃了使用 <code>OCGumbo</code>，而是直接使用正则匹配 。</p>
<h5 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h5><p>使用 js 选择器 <code>getElementsByTagName()</code> 来获取网页的HTML字符串，再利用正则表达式来匹配 <code>img</code> 标签，上面获取图片索引的方法还是可以继续使用，但是这里还有另外一个方法，依然是通过注入js脚本代码，参考下面的后三篇文章 。</p>
<p>在初始化 <code>wkWebview</code> 的时候，注入下面的 <code>js</code> 代码 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *nativejsSource;</div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123; </div><div class="line">     <span class="comment">/// 从bundle中加载js资源文件，转成oc字符串</span></div><div class="line">    nativejsSource = [<span class="built_in">NSString</span> stringWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"ImgAddClickEvent"</span> ofType:<span class="string">@"js"</span>] encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</div><div class="line">&#125;); </div><div class="line"><span class="comment">/// 注入js脚本代码</span></div><div class="line">[userContentController addUserScript:[[<span class="built_in">WKUserScript</span> alloc] initWithSource:nativejsSource injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentEnd</span> forMainFrameOnly:<span class="literal">YES</span>]];</div><div class="line"><span class="comment">/// 添加脚本消息处理</span></div><div class="line">[userContentController addScriptMessageHandler:[[YQWeakScriptMessageDelegate alloc] initWithDelegate:<span class="keyword">self</span>] name:<span class="string">@"imageDidClick"</span>];</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 获取所有img标签</span></div><div class="line"><span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</div><div class="line"></div><div class="line"><span class="comment">/// 获取所有的imgUrl</span></div><div class="line"><span class="keyword">var</span> imgUrls = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> y = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> width = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> height = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> img = imgs[i];</div><div class="line">    <span class="comment">/// 如果图片链接存在</span></div><div class="line">    <span class="keyword">if</span> (img.src || img.getAttribute(<span class="string">'data-src'</span>)) &#123;</div><div class="line">        <span class="comment">/// 添加到图片链接数组中</span></div><div class="line">        imgUrls.push(img.src || img.getAttribute(<span class="string">'data-src'</span>));</div><div class="line">        <span class="comment">/// 如果图片没有默认的onclick事件，且父元素不是a标签，则添加onclick事件，当用户点击时，把图片链接回传给Native</span></div><div class="line">        <span class="keyword">if</span> (!img.onclick &amp;&amp; img.parentElement.tagName !== <span class="string">"A"</span>) &#123;</div><div class="line">            <span class="comment">/// 给图片添加下标的属性</span></div><div class="line">            img.index = i;      <span class="comment">/// 记录下标</span></div><div class="line">            <span class="comment">/// 添加点击事件，并且回传选中的图片链接、下标、屏幕上的位置、全部的图片数组等</span></div><div class="line">            img.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                x = <span class="keyword">this</span>.getBoundingClientRect().left;</div><div class="line">                y = <span class="keyword">this</span>.getBoundingClientRect().top;</div><div class="line">                x = x + <span class="built_in">document</span>.documentElement.scrollLeft;</div><div class="line">                y = y + <span class="built_in">document</span>.documentElement.scrollTop;</div><div class="line">                width = <span class="keyword">this</span>.width;</div><div class="line">                height = <span class="keyword">this</span>.height;</div><div class="line">                <span class="keyword">var</span> imgInfo = &#123;</div><div class="line">                <span class="attr">imgUrl</span>: <span class="keyword">this</span>.src || <span class="keyword">this</span>.getAttribute(<span class="string">'data-src'</span>),</div><div class="line">                <span class="attr">x</span>: x,</div><div class="line">                <span class="attr">y</span>: y,</div><div class="line">                <span class="attr">width</span>: width,</div><div class="line">                <span class="attr">height</span>: height,</div><div class="line">                <span class="attr">index</span>: <span class="keyword">this</span>.index,</div><div class="line">                <span class="attr">imgUrls</span>: imgUrls</div><div class="line">                &#125;;</div><div class="line">                <span class="comment">/// UIWebView使用</span></div><div class="line">                h5ImageDidClick(imgInfo);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">h5ImageDidClick</span> (<span class="params">info</span>) </span>&#123;</div><div class="line">    <span class="comment">/// WKWebView使用</span></div><div class="line">    <span class="built_in">window</span>.webkit.messageHandlers.imageDidClick.postMessage(info);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现 <code>WKScriptMessageHandler</code> 代理方法，当点击图片的时候会获取到被点击的图片的信息，包括 src，size，index等，还有网页的图片数组 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - WKScriptMessageHandler</span></div><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</div><div class="line">    <span class="keyword">if</span> ([message.name isEqualToString:<span class="string">@"imageDidClick"</span>]) &#123;</div><div class="line">        <span class="built_in">NSDictionary</span> *dict = message.body;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,dict);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但，上面这种做法明显是不太合理的，我们不能在每次点击都去获取所有的图片src，这样做实在太浪费性能 。所以正确做法应该是在当网页加载完成时去获取 。</p>
<p>我们实现 <code>WKNavigationDelegate</code> 代理方法，当网页加载完成时，使用 js 方法选择器获取网页HTML字符串，在 <code>getImgWithHtmlStr:callback:</code> 自定义方法中使用正则匹配网页图片 <code>img</code> 标签，完成后回调（我这里回调只是输出 log）。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="built_in">WKNavigation</span> *)navigation &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"webView did finish"</span>);</div><div class="line">    <span class="built_in">NSString</span> *jsToGetHTMLSource = <span class="string">@"document.getElementsByTagName('body')[0].innerHTML"</span>;</div><div class="line">    [webView evaluateJavaScript:jsToGetHTMLSource completionHandler:^(<span class="keyword">id</span> _Nullable HTMLsource, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        [<span class="keyword">self</span> getImgWithHtmlStr:(<span class="built_in">NSString</span> *)HTMLsource callback:^(<span class="keyword">id</span> result) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,result);</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正则匹配 <code>img</code> 标签，方法实现：因为是耗时操作，下面使用了 <code>GCD</code> 的异步队列任务组 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - get all image url</span></div><div class="line">- (<span class="keyword">void</span>)getImgWithHtmlStr:(<span class="built_in">NSString</span> *)htmlStr callback:(<span class="keyword">void</span> (^)(<span class="keyword">id</span>))callback &#123;</div><div class="line">    <span class="keyword">if</span> (!htmlStr || !htmlStr.length) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> group_async_queue:^&#123;</div><div class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">/// @"&lt;img[^&gt;]+?data-src=[\"']?([^&gt;'\"]+)[\"']?"</span></div><div class="line">        <span class="built_in">NSString</span> *pattern = <span class="string">@"src=[\"']?([^&gt;'\"]+)(jpg|png|gif|jpeg)[\"']?"</span>;</div><div class="line">        <span class="comment">/// NSString *htmlStr = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error];</span></div><div class="line">        <span class="built_in">NSRegularExpression</span> *regular = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:pattern options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:&amp;error];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (error) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.imageSrcArray.count) &#123;</div><div class="line">            [<span class="keyword">self</span>.imageSrcArray removeAllObjects];</div><div class="line">        &#125;</div><div class="line">        [regular enumerateMatchesInString:htmlStr options:<span class="built_in">NSMatchingReportCompletion</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, htmlStr.length) usingBlock:^(<span class="built_in">NSTextCheckingResult</span> * _Nullable result, <span class="built_in">NSMatchingFlags</span> flags, <span class="built_in">BOOL</span> * _Nonnull stop) &#123; </div><div class="line">            <span class="built_in">NSString</span> *imgStr = [htmlStr substringWithRange:result.range]; </div><div class="line">            <span class="keyword">if</span> (imgStr.length) &#123; </div><div class="line">                imgStr = [imgStr substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">5</span>, imgStr.length - <span class="number">6</span>)]; </div><div class="line">                [<span class="keyword">self</span>.imageSrcArray addObject:imgStr];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125; complete:^&#123;</div><div class="line">        <span class="keyword">if</span> (callback) callback(<span class="string">@"get all image url success!"</span>);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>GCD</code> 异步队列组方法封装，避免耗时操作导致主线程阻塞 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)group_async_queue:(<span class="keyword">void</span> (^)())queue complete:(<span class="keyword">void</span> (^)())block &#123;</div><div class="line">    <span class="comment">/// 创建队列组</span></div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    <span class="comment">/// 进入队列组</span></div><div class="line">    dispatch_group_enter(group);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="comment">/// 异步执行任务</span></div><div class="line">        <span class="keyword">if</span> (queue) queue();</div><div class="line">        <span class="comment">/// 离开队列组</span></div><div class="line">        dispatch_group_leave(group);</div><div class="line">    &#125;); </div><div class="line">    <span class="comment">/// 队列组执行完毕, 通知主线程</span></div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">if</span> (block) block();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，最终使用 方案二 解决了重复请求后台服务器的问题 。</p>
<p><strong> 参考文章：</strong><br><a href="http://www.jianshu.com/p/a388ec39e37a" target="_blank" rel="external">UIWebView保存图片</a><br><a href="http://www.jianshu.com/p/029a5ef4e86a" target="_blank" rel="external">HTML解析之Gumbom(iOS)</a><br><a href="http://www.jianshu.com/p/ac45d99cf912" target="_blank" rel="external">iOS中UIWebView与WKWebView、JavaScript与OC交互、Cookie管理看我就够（上）</a><br><a href="http://www.jianshu.com/p/870dba42ec15" target="_blank" rel="external">iOS中UIWebView与WKWebView、JavaScript与OC交互、Cookie管理看我就够（中）</a><br><a href="http://www.jianshu.com/p/52668d5b2e68" target="_blank" rel="external">iOS中UIWebView与WKWebView、JavaScript与OC交互、Cookie管理看我就够（下）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170527-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;前段时间有个需求，因为项目中有些banner和资讯列表，点开是网页浏览器，大部分是微信公众号的文章链接，还有一些自
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/categories/iOS/Objective-C/"/>
    
    
      <category term="wkWebview" scheme="http://yoursite.com/tags/wkWebview/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 主题之 Hueman</title>
    <link href="http://yoursite.com/2017/05/19/hexo-themes-hueman/"/>
    <id>http://yoursite.com/2017/05/19/hexo-themes-hueman/</id>
    <published>2017-05-19T03:06:54.000Z</published>
    <updated>2017-09-23T01:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170519-00-blog.jpeg" alt=""></p>
<p>打自搭建好博客开始，默认的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next主题</a>实在不足以满足我的审美观(ಥ_ಥ)呀，…必须（果断）折腾！哗啦啦，直奔<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo主题库</a>，无奈选择困难症，千挑万选最终觉得<a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="external">Hunman主题</a>比较符合我的Style~~ 好了，本文就来细讲更换Hueman主题的愉（心）快（塞）过程，业余时间断断续续的弄了好久呢 。</p>
<p>上菜：先来一份<a href="https://github.com/ppoffice/hexo-theme-hueman/wiki" target="_blank" rel="external"><strong><em>Hueman主题文档</em></strong></a>，客官请慢看，本文所写大部分在文档也能找到 。</p>
<hr>
<h5 id="一-nbsp-下载（Clone）主题到本地"><a href="#一-nbsp-下载（Clone）主题到本地" class="headerlink" title="一. &nbsp;下载（Clone）主题到本地"></a>一. &nbsp;下载（<strong>Clone</strong>）主题到本地</h5><p>使用以下任一命令Clone到本地 <strong>../themes</strong> 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/// Clone with SSH</div><div class="line">$ git clone git@github.com:ppoffice/hexo-theme-hueman.git</div><div class="line"></div><div class="line">/// Clone with HTTPS</div><div class="line">$ git clone https://github.com/ppoffice/hexo-theme-hueman.git</div></pre></td></tr></table></figure></p>
<p>Clone 下来的主题目录结构如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml	# 主题配置文件。修改时会自动更新，无需重启服务器；</div><div class="line">├── languages	# 语言文件夹，若要设置主题语言，修改主题配置文件；</div><div class="line">├── layout	# 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式；</div><div class="line">├── scripts	# 脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件；</div><div class="line">└── source	# 资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。</div></pre></td></tr></table></figure>
<p><strong> 注意：Clone下来的配置文件<code>_config.yml</code>多了<code>.example</code>后缀，手动去掉即可，否则替换主题后不生效哦！之前就是没留意到这个还以为姿势不对导致替换后没效果 。</strong></p>
<p><strong> 重要说明：在 <code>Hexo</code> 中有两份主要的配置文件，其名称都是 <code>_config.yml</code> 。 其中，一份位于<code>站点根目录</code>下，主要包含 Hexo 本身的配置；另一份位于<code>主题目录</code>下，这份配置由主题作者提供，主要用于配置主题相关的选项，所以千万不要混淆 。 为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code> 。</strong> </p>
<p>替换Hexo默认主题，只需要修改 <code>站点配置文件</code> 中的 <strong> <code>theme</code> </strong> 字段值即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions		# 拓展插件</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: hueman		# 当前主题名称。值为false时禁用主题</div></pre></td></tr></table></figure></p>
<p>是不是很简单，这样就好了，现在可以使用 <code>hexo s</code> 命令启动测试服务器看看效果啦 。</p>
<hr>
<h5 id="二-nbsp-修改主题样式"><a href="#二-nbsp-修改主题样式" class="headerlink" title="二. &nbsp;修改主题样式"></a>二. &nbsp;修改主题样式</h5><p>2.1 &nbsp;替换主题 <code>Header</code> &amp;&amp; <code>Footer</code> 背景</p>
<p>Header 路径 <code>../themes/hueman/source/css/_partial/header.styl</code> 文件 。<br>Footer 路径 <code>../themes/hueman/source/css/_partial/footer.styl</code> 文件 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/// 直接去掉这一行，不要注释，否则报错，坑</div><div class="line">- background: color-header-background</div><div class="line"></div><div class="line">/// 添加这一行，url：括号内填入图片URL地址</div><div class="line">+ background-image: url(&quot;your background image url&quot;)</div></pre></td></tr></table></figure>
<p>2.2 &nbsp;替换 <code>Logo</code> 图片</p>
<p>Logo 图片路径 <code>../themes/hueman/source/css/images/logo-header.png</code><br>直接替换一张同名（<code>logo-header.png</code>）的图片即可 。</p>
<p>如果想要设置 <code>Logo</code> 图片的Size，打开 <code>主题配置文件</code> 修改 <code>customize:</code> 字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">customize:</div><div class="line">    logo:</div><div class="line">        width: 165</div><div class="line">        height: 60</div><div class="line">        url: images/logo-header.png</div></pre></td></tr></table></figure></p>
<hr>
<h5 id="三-nbsp-添加主题配置"><a href="#三-nbsp-添加主题配置" class="headerlink" title="三. &nbsp;添加主题配置"></a>三. &nbsp;添加主题配置</h5><p>3.1 &nbsp;添加社交链接，直接把链接地址填上去就好了，不需要的直接注释掉吧 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">social_links: # for more icons, please see http://fontawesome.io/icons/#brand</div><div class="line">      twitter: /</div><div class="line">      facebook: /</div><div class="line">      google-plus: /</div><div class="line">      github: /</div><div class="line">      weibo: /</div></pre></td></tr></table></figure>
<p>3.2 &nbsp;添加RSS订阅，首先需要安装RSS插件 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// 执行以下命令安装 RSS 插件</div><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>3.2.1 &nbsp;&nbsp;在 <code>站点配置文件</code> 中添加RSS支持 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># RSS订阅支持</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line"></div><div class="line"># Feed Atom</div><div class="line">feed:</div><div class="line">type: atom</div><div class="line">path: atom.xml</div><div class="line">limit: 20</div></pre></td></tr></table></figure></p>
<p>3.2.2 &nbsp;&nbsp;在 <code>主题配置文件</code> 中开启RSS订阅。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure></p>
<p>附上一篇<a href="https://mritd.me/2016/03/08/Hexo%E6%B7%BB%E5%8A%A0Rss%E8%AE%A2%E9%98%85/#一安装rss插件" target="_blank" rel="external">《Hexo 添加 Rss 订阅》</a>的文章，需要的童鞋可以参考 。</p>
<p>3.3 &nbsp;添加博客评论，Hueman 支持 <code>有言</code>，<code>多说</code>，<code>disqus</code> 评论服务。 </p>
<p>1.&nbsp;&nbsp;<code>有言</code> 不知道是怎样，貌似没太多人用；<br>2.&nbsp;&nbsp;<code>多说</code> 官方最近发布消息，评论系统将于2017年6月1号正式关闭；<br>3.&nbsp;&nbsp;”<code>disqus</code> 在Quantcast的美国网络排名中以每月1.44亿独立用户访问排行第一“，这是维基百科的描述，好腻害 。可惜在大天朝需要翻墙才能用，好累啊，🙄 呵呵哒 。。</p>
<p>现在 <code>多说</code> 挂了，貌似可以选择的替换方案只有 <code>disqus</code> 比较靠谱，其它国内的不知道啥时候会步 <code>多说</code> 后尘，so~ 使用 <code>disqus</code>一劳永逸吧，而且 <code>disqus</code> 的Style是我喜欢的 。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170519-01-blog.png" alt="Screenshots"></p>
<p>到<strong> <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a> </strong>官网注册帐号，登录后，点击首页的 <code>GET STARTED</code> 按钮，选择 <code>I want to install Disqus on my site</code> 选项，按照步骤配置，添加站点即可；最后将你的<code>shortname</code>填到主题配置文件中就可以啦 。附上一篇<a href="http://www.jianshu.com/p/c4f65ebe23ad" target="_blank" rel="external">《为 Hexo 博客加入 Disqus 评论》</a>的文章，写的比较详细，需要的童鞋可以参考 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">comment:</div><div class="line">    disqus: 	# 这里填在Disqus上添加的站点名字就OK</div><div class="line">    duoshuo: 	# enter duoshuo shortname here</div><div class="line">    youyan: 	# enter youyan uid here</div><div class="line">    facebook:   # enter true to enable</div><div class="line">    isso: 	# enter the domain name of your own comment isso server eg. comments.example.com</div></pre></td></tr></table></figure>
<p>3.4 &nbsp;添加网站统计分析，可以使用谷歌分析或者百度分析 。</p>
<p>3.4.1    &nbsp;&nbsp;注册<a href="https://www.google.com/intl/zh-CN/analytics/" target="_blank" rel="external">谷歌分析</a>服务；<br>登录后，在 管理-&gt;跟踪信息-&gt;跟踪代码 中可以获取跟踪 ID；<br>在 <code>主题配置文件</code> 中的 <code>google_analytics:</code> 添加你的跟踪 ID 即可 。</p>
<p>3.4.2 &nbsp;&nbsp;注册<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度分析</a>服务；<br>登录后，在 管理-&gt;代码管理-&gt;代码获取，在 js 代码段中获取 <code>32位</code> 的哈希值；<br>在 <code>主题配置文件</code> 中的 <code>baidu_analytics:</code> 添加获取的 <code>32位</code> 百度分析哈希值即可 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plugins:</div><div class="line">    lightgallery: true 		# options: true, false</div><div class="line">    justifiedgallery: true 	# options: true, false</div><div class="line">    google_analytics: 		# 输入您的Google Analytics（分析）的跟踪ID</div><div class="line">    baidu_analytics: 		# 输入百度分析哈希键</div><div class="line">    mathjax: false 		# options: true, false</div></pre></td></tr></table></figure>
<p>3.5 &nbsp;设置分享，分享方式有四种，默认 <code>default</code>；<br>建议使用 <code>jiathis</code> 或者 <code>bdshare</code> , <code>addtoany</code> 貌似要翻墙才能分享出去 。<br>问题：<code>jiathis</code> 和 <code>bdshare</code> <code>deploy</code> 后不知道为啥不显示被分享的服务商的图标，坑！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Share</div><div class="line">share: default # options: jiathis, bdshare, addtoany, default</div></pre></td></tr></table></figure>
<p>3.6 &nbsp;加入网站计数，推荐使用<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子网站计数</a>，<code>一行脚本+一行标签</code> 搞定，简单到爆；</p>
<p>3.6.1 &nbsp;安装脚本（Required）<br>打开路径 <code>../themes/hueman/layout/common/footer.ejs</code> 文件，插入以下脚本即可 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>3.6.2 &nbsp;安装标签（Optional）<br>&nbsp;&nbsp;&nbsp;<strong>a. &nbsp;显示站点总访问量：</strong><br>&nbsp;&nbsp;&nbsp;要显示站点总访问量，复制以下代码添加到你需要显示的位置 。有两种算法可选：</p>
<p>&nbsp;&nbsp;&nbsp;算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</div><div class="line">    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</div><div class="line">  本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;<strong>b. &nbsp;显示单页面访问量：</strong><br>&nbsp;&nbsp;&nbsp;要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置 。</p>
<p>&nbsp;&nbsp;&nbsp;算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;</div><div class="line">  本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>标签代码同样是插入到 <code>../footer.ejs</code> 文件中；如果是只计数，不显示，则只安装脚本代码，不需安装标签代码 。代码中文字是可以修改的，只要保留id正确即可 。</p>
<p>3.7 &nbsp;<strong><code>// TODO:</code></strong> 站内搜索，按照<a href="https://github.com/ppoffice/hexo-theme-hueman/wiki/Search" target="_blank" rel="external">主题文档</a>安装 <code>hexo-generator-json-content</code> 插件，明明安装成功了，但是一跑测试就报错，目前还没解决，后面解决了再更新 。</p>
<hr>
<h5 id="四-nbsp-其它配置"><a href="#四-nbsp-其它配置" class="headerlink" title="四. &nbsp;其它配置"></a>四. &nbsp;其它配置</h5><p>4.1 &nbsp;About页面，刚搭建完点击About是 <code>not found</code> 吧！那是需要自己 <code>new</code> 一个才有呢 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// 新建一个 about 页面文件</div><div class="line">$ hexo new page &quot;about&quot;</div></pre></td></tr></table></figure>
<p>以上命令会在 <code>../xxxx.github.io/source/</code> 文件夹下面生成一个 <code>about</code> 文件夹，里面会创建一个<code>index.md</code> 的文件 。同样的使用 <code>Markdown</code> 语法编辑，完成后 <code>deploy</code> 。</p>
<p>在 <code>主题配置文件</code> 中的 <code>About:</code> 字段添加路径 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">    Home: /</div><div class="line">    # Delete this row if you don&apos;t want categories in your header nav bar</div><div class="line">    Categories:</div><div class="line">    About: /about/index.html</div></pre></td></tr></table></figure></p>
<p>4.2 &nbsp;添加网站友情链接 。</p>
<p>在 <code>主题配置文件</code> 中的 <code>links:</code> 字段下添加 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">links:</div><div class="line">       Hexo: http://hexo.io</div><div class="line">       Github: https://xxxx.xx</div><div class="line">       ...</div></pre></td></tr></table></figure></p>
<p>4.3 &nbsp;<code>404 Not-Found</code> 页面，让我们一起加入<a href="http://www.qq.com/404/" target="_blank" rel="external">腾讯公益<strong>404</strong></a>吧 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// 新建一个 404 页面文件</div><div class="line">$ hexo new page &quot;404&quot;</div></pre></td></tr></table></figure>
<p>以上命令会在 <code>../xxxx.github.io/source/</code> 文件夹下面生成一个 <code>404.html</code> 文件，拷贝以下<code>HTML</code> 代码填进去就可以了，记得改下 <code>homePageUrl</code> 为你的站点<code>URL</code>地址 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</div><div class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt; </div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;your site url&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt; </div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<hr>
<h5 id="五-nbsp-关于文章分类"><a href="#五-nbsp-关于文章分类" class="headerlink" title="五. &nbsp;关于文章分类"></a>五. &nbsp;关于文章分类</h5><p>5.1 &nbsp;一个小技巧，在站点目录 <code>xxxx.github.io/scaffolds/post.md</code> 文件中添加一项<code>categories</code>，这样每次新建博客文章 <code>new</code> 出来的 <code>.md</code> 文件就都带 <code>categories</code> 了，不用手动再写一遍囖，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">categories:	/// 添加这一项</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>5.2 &nbsp;设置分类的父子级关系，很多时候我们只需要创建少数几个大分类，里面再细分为N个小分类就好了，对于 <code>Hueman</code> 这样的主题来说可以更方便的管理文章，就像下图这样：</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170519-02-blog.png" alt="Screenshots"></p>
<p>那是怎么做呢 ？其实很简单，使用 <code>Front-matter</code> 。<br><code>Front-matter</code> 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo 主题之 Hueman</div><div class="line">date: 2017-05-19 11:06:54 </div><div class="line">categories:	</div><div class="line">	- Technology</div><div class="line">	- Themes </div><div class="line">tags:		</div><div class="line">	- Hexo</div><div class="line">	- Themes</div><div class="line">---</div></pre></td></tr></table></figure>
<p>只有文章支持分类和标签，你可以在 <code>Front-matter</code> 中设置 。<br>在上面的 <code>categories:</code> 参数中，依次下来就会使分类 <code>Technology</code> 成为 <code>Themes</code> 的父分类，父分类总是排在第一位，以下均为子分类 。<br>而 <code>tags:</code> 参数则是为这篇文章打的标签，同样是可以添加多个，没有父子级标签之说 。</p>
<p><strong><em> 写到这里基本上把 Hueman 折腾得差不多了，以后还有其它的细节想起来再更新囖！</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170519-00-blog.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;打自搭建好博客开始，默认的&lt;a href=&quot;https://github.com/iissnan/hexo-th
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
      <category term="Themes" scheme="http://yoursite.com/categories/Technology/Themes/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Themes" scheme="http://yoursite.com/tags/Themes/"/>
    
  </entry>
  
  <entry>
    <title>集成友盟推送的问题</title>
    <link href="http://yoursite.com/2017/05/01/on-umeng-push/"/>
    <id>http://yoursite.com/2017/05/01/on-umeng-push/</id>
    <published>2017-05-01T01:16:15.000Z</published>
    <updated>2017-09-23T01:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170501-00-blog.png" alt=""></p>
<p>最近项目需要做消息推送，于是决定使用第三方推送服务（为了方便后台统一iOS和Android的消息管理）；目前做消息推送的服务商有很多，综合考虑决定集成友盟+的，主要是不想在项目中集成太多类似的第三方SDK，而且在这之前已经使用了友盟的统计和分享功能，口碑也还算不错，所以就统一了，也方便管理 。</p>
<p>上友盟官网下载最新的<code>SDK</code>，这里吐槽一下，竟然不支持<code>CocoaPods</code>集成，需要手动导入<code>SDK</code>包到项目，无疑又给我们的<code>ipa</code>包增加体积 。接下来就是按照友盟<a href="http://dev.umeng.com/push/ios/integration" target="_blank" rel="external">iOS SDK文档</a>步骤来集成，文档还算比较全，相信大家并没什么难度 。</p>
<h4 id="一-初始化并注册友盟推送："><a href="#一-初始化并注册友盟推送：" class="headerlink" title="一. 初始化并注册友盟推送："></a>一. 初始化并注册友盟推送：</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/// 绑定App的appKey和启动参数，启动消息参数用于处理用户通过消息打开应用相关信息</span></div><div class="line">    [UMessage startWithAppkey:kAppKey launchOptions:launchOptions httpsEnable:<span class="literal">YES</span>];</div><div class="line"><span class="meta">#ifdef DEBUG</span></div><div class="line">    [UMessage openDebugMode:<span class="literal">YES</span>];</div><div class="line">    [UMessage setLogEnabled:<span class="literal">YES</span>];</div><div class="line"><span class="meta">#else</span></div><div class="line">    [UMessage openDebugMode:<span class="literal">NO</span>];</div><div class="line">    [UMessage setLogEnabled:<span class="literal">NO</span>];</div><div class="line"><span class="meta">#endif</span></div><div class="line">    </div><div class="line">    <span class="comment">/// 注册远程推送</span></div><div class="line">    [UMessage registerForRemoteNotifications];</div></pre></td></tr></table></figure>
<p>iOS 10之后苹果统一了推送API，使用<code>UNUserNotificationCenter</code>这个类请求用户的授权 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue] &gt;= <span class="number">10.</span>f) &#123; </div><div class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line">        [center setDelegate:[YQUMessage share]];</div><div class="line">        [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert)</div><div class="line">                              completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                                  <span class="keyword">if</span> (!error &amp;&amp; granted) &#123;</div><div class="line">                                      <span class="built_in">NSLog</span>(<span class="string">@"注册成功"</span>);</div><div class="line">                                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                      <span class="built_in">NSLog</span>(<span class="string">@"注册失败"</span>);</div><div class="line">                                  &#125;</div><div class="line">                              &#125;];</div><div class="line">        <span class="comment">/// 通过 getNotificationSettingsWithCompletionHandler 获取用户权限设置, yes or no</span></div><div class="line">        [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"settings = %@"</span>,settings);</div><div class="line">        &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="二-推送证书配置"><a href="#二-推送证书配置" class="headerlink" title="二. 推送证书配置"></a>二. 推送证书配置</h4><p>2.1    在开发者中心的<code>identifiers</code>中打开<code>Push Notifications</code> 。<br><img src="http://oonis1a4c.bkt.clouddn.com/20170501-01-blog.png" alt=""></p>
<p>2.2    在开发者中心的<code>certificates</code>中配置推送证书，证书制作很简单这里就不多说了 。<br><img src="http://oonis1a4c.bkt.clouddn.com/20170501-02-blog.png" alt=""></p>
<p>2.3    <code>xocde 8</code>环境多了这个选项开关，想要接收推送必须打开 。<br><img src="http://oonis1a4c.bkt.clouddn.com/20170501-03-blog.png" alt=""></p>
<h4 id="三-接收推送消息内容"><a href="#三-接收推送消息内容" class="headerlink" title="三. 接收推送消息内容"></a>三. 接收推送消息内容</h4><h5 id="iOS-10之前接收推送消息的方法"><a href="#iOS-10之前接收推送消息的方法" class="headerlink" title=" iOS 10之前接收推送消息的方法 "></a><strong><em> iOS 10之前接收推送消息的方法 </em></strong></h5><p>3.1    iOS 10 之前，当APP在前台或者后台收到推送时会调用这个方法，<code>userInfo</code>就是推送的消息体 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="keyword">nonnull</span> <span class="built_in">NSDictionary</span> *)userInfo &#123;</div><div class="line">    <span class="comment">/// 封装的友盟推送类，当应用处于前台活跃状态时收到推送显示自定义的Alert 。</span></div><div class="line">    [YQUMessage showCustomAlertWithUserInfo:userInfo];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.2    （可选）打开<code>background modes</code>开关，勾选<code>remote notifications</code>，可以实现静默推送 。<br><img src="http://oonis1a4c.bkt.clouddn.com/20170501-04-blog.png" alt=""> </p>
<p>3.3    静默推送会调用下面这个方法，在<code>completionHandler</code>这个block回调中刷新数据，上面的方法则不会被调用了，<code>userInfo</code>就是推送的消息体 。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo fetchCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UIBackgroundFetchResult</span>))completionHandler &#123;</div><div class="line">    <span class="comment">/// 封装的友盟推送类，当应用处于前台活跃状态时收到推送显示自定义的Alert 。</span></div><div class="line">    [YQUMessage showCustomAlertWithUserInfo:userInfo];</div><div class="line">    completionHandler(userInfo ? <span class="built_in">UIBackgroundFetchResultNewData</span> : <span class="built_in">UIBackgroundFetchResultNoData</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="iOS-10之后接收推送消息新的方法"><a href="#iOS-10之后接收推送消息新的方法" class="headerlink" title=" iOS 10之后接收推送消息新的方法 "></a><strong><em> iOS 10之后接收推送消息新的方法 </em></strong></h5><p>iOS 10之后统一使用<code>UNUserNotificationCenter</code>这个通知类，只要遵守<code>UNUserNotificationCenterDelegate</code>委托协议，实现两个委托方法（分别是当应用在前台和后台的处理）就能处理接收到的推送消息，在iOS 10之前不管前台后台都是在同一个方法中处理的 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// iOS10新增: 处理前台收到通知的代理方法</span></div><div class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(<span class="keyword">void</span> (^)(UNNotificationPresentationOptions))completionHandler &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *userInfo = notification.request.content.userInfo;</div><div class="line">    <span class="keyword">if</span>([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="comment">/// 显示自定义弹窗</span></div><div class="line">        [YQUMessage showCustomAlertWithUserInfo:userInfo];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/// 应用处于前台时的本地推送接受</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/// 应用处于前台时, 自定义了弹框, 不需要系统的顶部弹窗, UNNotificationPresentationOptionAlert</span></div><div class="line">    completionHandler(UNNotificationPresentationOptionSound | UNNotificationPresentationOptionBadge);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// iOS10新增: 处理后台点击通知的代理方法</span></div><div class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span> (^)())completionHandler &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *userInfo = response.notification.request.content.userInfo;</div><div class="line">    <span class="keyword">if</span>([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="comment">/// 显示自定义弹窗</span></div><div class="line">        [YQUMessage showCustomAlertWithUserInfo:userInfo];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/// 应用处于后台时的本地推送接受</span></div><div class="line">    &#125;</div><div class="line">    completionHandler();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成以上步骤之后，其实已经可以实现基本的消息推送了 。在友盟后台分别上传开发和生产环境的<code>p12</code>证书文件，切换到测试模式，添加测试设备的<code>Device Token</code>，添加测试消息就可以进行推送测试，当然只有添加到测试列表的手机能收到 。</p>
<p>如何拿到<code>deviceToken</code>？通过下面这个方法里面可以获取，需要使用以下过滤字符串的方式才能打印出正确的Token值 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"deviceToken = %@"</span>,[[[deviceToken description] stringByTrimmingCharactersInSet:</div><div class="line">                                [<span class="built_in">NSCharacterSet</span> characterSetWithCharactersInString:<span class="string">@"&lt;&gt;"</span>]]</div><div class="line">                               stringByReplacingOccurrencesOfString:<span class="string">@" "</span> withString:<span class="string">@""</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>到这里前面的都已经没有问题了，让我们来加两个处理通知的按钮试试 。先来看看如何创建动作按钮，<code>iOS 8</code> 和 <code>iOS 10</code> 的方法也是不一样的啊 。 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - iOS 8</span></div><div class="line">	<span class="comment">/// 查看按钮</span></div><div class="line">        <span class="built_in">UIMutableUserNotificationAction</span> *open = [[<span class="built_in">UIMutableUserNotificationAction</span> alloc] init];</div><div class="line">        [open setActivationMode:<span class="built_in">UIUserNotificationActivationModeForeground</span>];</div><div class="line">        [open setIdentifier:kOpenActionIdentifier];</div><div class="line">        [open setTitle:locStr(<span class="string">@"notify.open"</span>)];</div><div class="line">        [open setAuthenticationRequired:<span class="literal">YES</span>];</div><div class="line">        [open setDestructive:<span class="literal">NO</span>];</div><div class="line">        </div><div class="line">        <span class="comment">/// 忽略按钮</span></div><div class="line">        <span class="built_in">UIMutableUserNotificationAction</span> *ignore = [[<span class="built_in">UIMutableUserNotificationAction</span> alloc] init];</div><div class="line">        [ignore setActivationMode:<span class="built_in">UIUserNotificationActivationModeBackground</span>];</div><div class="line">        [ignore setIdentifier:kIgnoreActionIdentifier];</div><div class="line">        [ignore setTitle:locStr(<span class="string">@"notify.ignore"</span>)];</div><div class="line">        [ignore setAuthenticationRequired:<span class="literal">NO</span>];</div><div class="line">        [ignore setDestructive:<span class="literal">YES</span>];</div><div class="line">        </div><div class="line">        <span class="comment">/// 创建动作(按钮)的类别集合</span></div><div class="line">        <span class="built_in">UIMutableUserNotificationCategory</span> *categorys = [[<span class="built_in">UIMutableUserNotificationCategory</span> alloc] init];</div><div class="line">        [categorys setActions:@[open, ignore] forContext:(<span class="built_in">UIUserNotificationActionContextDefault</span>)];</div><div class="line">        [categorys setIdentifier:kNotifityCategoryIdentifier]; </div><div class="line"></div><div class="line"><span class="meta">#pragma mark - iOS 10 </span></div><div class="line"> 	UNNotificationAction *open;</div><div class="line">        open = [UNNotificationAction actionWithIdentifier:kOpenActionIdentifier</div><div class="line">                                                    title:locStr(<span class="string">@"notify.open"</span>)     <span class="comment">/// 查看</span></div><div class="line">                                                  options:UNNotificationActionOptionForeground];</div><div class="line">        UNNotificationAction *ignore;</div><div class="line">        ignore = [UNNotificationAction actionWithIdentifier:kIgnoreActionIdentifier</div><div class="line">                                                      title:locStr(<span class="string">@"notify.ignore"</span>) <span class="comment">/// 忽略</span></div><div class="line">                                                    options:UNNotificationActionOptionForeground];</div><div class="line">        UNNotificationCategory *categorys;</div><div class="line">        categorys = [UNNotificationCategory categoryWithIdentifier:kNotifityCategoryIdentifier</div><div class="line">                                                           actions:@[open, ignore]   <span class="comment">/// 创建动作(按钮)的类别集合</span></div><div class="line">                                                 intentIdentifiers:@[kOpenActionIdentifier,kIgnoreActionIdentifier]</div><div class="line">                                                           options:UNNotificationCategoryOptionCustomDismissAction];</div><div class="line">        [center setNotificationCategories:[<span class="built_in">NSSet</span> setWithObjects:categorys, <span class="literal">nil</span>]];</div></pre></td></tr></table></figure>
<p>当应用在后台收到推送消息时，下拉的通知栏列表是这样的，向左划出现按钮，如下图：</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170501-05-blog.jpg?imageView/2/w/600/h/450" alt=""></p>
<p>点击 <code>X</code> 和 <code>忽略</code> 按钮效果是一样的，都会将消息从通知列表中移除，当点击<code>查看</code>按钮的时候会唤起APP进入前台，并调用接收通知的方法 。<br>but，问题来了，当点击<code>查看</code>按钮唤起APP时并没有调用接收推送消息的方法，导致获取不到推送的消息内容，无法做后面的逻辑操作 。<br>这里必须吐槽下友盟的技术支持，在论坛发帖几天没人理，后来发邮件才有人回应，但是依然找不到问题所在（估计是封装的SDK代码有问题），友盟官方也没有后续的回应；最后参考了大部分APP的推送，发现都没有加这个，并且考虑到公司应用实际业务需求，所以最终也还是没有加上这个按钮 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 加了动作按钮后不会调用这两个方法中的任意一个，即使没有开静默推送</span></div><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="keyword">nonnull</span> <span class="built_in">NSDictionary</span> *)userInfo &#123; </div><div class="line">&#125; </div><div class="line"><span class="comment">/// 静默推送调用</span></div><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo fetchCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UIBackgroundFetchResult</span>))completionHandler &#123; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面最后一段代码是我封装的类方法，不管是iOS 10之前还是之后，在前台还是后台，都统一在这里面处理收到的推送消息，其中<code>type</code>和<code>url</code>字段为和后台约定好的自定义字段，用于是否需要跳转展示webview 。当然，以后可能需要跳转到指定的页面，只要和后台约定好要跳转的页面定义好推送字段，也是可以在这里处理的 。 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)showCustomAlertWithUserInfo:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</div><div class="line">    </div><div class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>([YQUMessage share]) weakSelf = [YQUMessage share];</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">UIApplication</span> sharedApplication].applicationState == <span class="built_in">UIApplicationStateActive</span>) &#123;</div><div class="line">        [[YQUMessage share] mainAsyncQueue:^&#123;</div><div class="line">            <span class="comment">/// 关闭友盟弹窗</span></div><div class="line">            [UMessage setAutoAlert:<span class="literal">NO</span>];</div><div class="line">            <span class="comment">/// 自定义弹窗</span></div><div class="line">            [[YQCostomAlertView alertWithImage:<span class="literal">nil</span></div><div class="line">                                         title:userInfo[<span class="string">@"aps"</span>][<span class="string">@"alert"</span>][<span class="string">@"title"</span>]</div><div class="line">                                       message:userInfo[<span class="string">@"aps"</span>][<span class="string">@"alert"</span>][<span class="string">@"body"</span>]</div><div class="line">                                cancelBtnTitle:titleForUrlStr(userInfo, <span class="literal">YES</span>)</div><div class="line">                                 otherBtnTitle:titleForUrlStr(userInfo, <span class="literal">NO</span>)</div><div class="line">                               clickIndexBlock:^(<span class="built_in">NSInteger</span> clickIndex) &#123;</div><div class="line">                                   </div><div class="line">                                   <span class="keyword">if</span> (!userInfo[<span class="string">@"url"</span>] &amp;&amp; !clickIndex) &#123;</div><div class="line">                                       <span class="comment">/// 补发消息点击事件，以便在友盟后台统计点击数</span></div><div class="line">                                       [UMessage sendClickReportForRemoteNotification:userInfo];</div><div class="line">                                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clickIndex) &#123;</div><div class="line">                                       YQWebViewController *webVC = [[YQWebViewController alloc] init];</div><div class="line">                                       [webVC loadWebURLSring:[userInfo valueForKey:<span class="string">@"url"</span>]];</div><div class="line">                                       [[weakSelf getCurrentVC].navigationController pushViewController:webVC animated:<span class="literal">YES</span>];</div><div class="line">                                       [UMessage sendClickReportForRemoteNotification:userInfo];</div><div class="line">                                   &#125;</div><div class="line">                                   </div><div class="line">                               &#125; animationStyle:AnimationStyleDefault] showAlertView];</div><div class="line">        &#125;];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (userInfo[<span class="string">@"url"</span>] &amp;&amp; [userInfo[<span class="string">@"url"</span>] length]) &#123;</div><div class="line">            YQWebViewController *webVC = [[YQWebViewController alloc] init];</div><div class="line">            [webVC loadWebURLSring:[userInfo valueForKey:<span class="string">@"url"</span>]];</div><div class="line">            [[weakSelf getCurrentVC].navigationController pushViewController:webVC animated:<span class="literal">YES</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/// 应用处于运行时（前台、后台）的消息处理</span></div><div class="line">        [UMessage didReceiveRemoteNotification:userInfo];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> *titleForUrlStr(<span class="built_in">NSDictionary</span> *userInfo, <span class="built_in">BOOL</span> isCancel) &#123;</div><div class="line">    <span class="built_in">BOOL</span> flag = (userInfo[<span class="string">@"url"</span>] &amp;&amp; [userInfo[<span class="string">@"url"</span>] length]);</div><div class="line">    <span class="keyword">return</span> isCancel ? (</div><div class="line">                       locStr(flag ? <span class="string">@"notify.ignore"</span> : <span class="literal">nil</span>)</div><div class="line">                       ):(</div><div class="line">                          locStr(flag ? <span class="string">@"notify.open"</span> : <span class="string">@"notify.gotIt"</span>)</div><div class="line">                          );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170501-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近项目需要做消息推送，于是决定使用第三方推送服务（为了方便后台统一iOS和Android的消息管理）；目前做消息
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>提高Terminal效率的Shell，oh-my-zsh</title>
    <link href="http://yoursite.com/2017/04/28/oh-my-zsh/"/>
    <id>http://yoursite.com/2017/04/28/oh-my-zsh/</id>
    <published>2017-04-28T13:42:01.000Z</published>
    <updated>2018-04-14T08:27:01.512Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170428-00-blog.png" alt=""></p>
<p>终端（命令行）作为程序 🦍们每天打交道的工具之一，熟练使用能够有效的提高工作效率，虽然每天敲的基本都是一些常用的命令，但是如果需要一个个字符的敲，想想也实在让人有些抓狂，有没有能像 IDE 敲代码那样的自动补全，自动纠错的工具（插件）呢？答案是 of course，有请 <a href="https://github.com/zsh-users/zsh" target="_blank" rel="external">zsh</a>！😅emmmm。。。虽然这货很强大，但是都说比较复杂，配置起来太麻烦，鲜有人使用。所以，不好意思，咱们今天的主角是 <a href="https://github.com/robbyrussell/oh-my-zsh?source=c" target="_blank" rel="external">oh-my-zsh</a>。</p>
<p>Github 上的简介是 ”A delightful community-driven framework for managing your zsh configuration。”（一个令人愉快的社区驱动框架，用于管理您的zsh配置。），概括说就是可以帮助你简单配置轻松使用 <code>zsh</code>，还能让你在无聊时玩耍 140 种主题，200+ 插件的装逼玩意。</p>
<blockquote>
<p>Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you’ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, “that is amazing! are you some sort of genius?”</p>
<p>Finally, you’ll begin to get the sort of attention that you have always felt you deserved. …or maybe you’ll use the time that you’re saving to start flossing more often. 😬</p>
</blockquote>
<p>🙄🙄😂作者你这样不太好吧。。。 废话太多了，说正事吧。</p>
<p>首先，肯定是需要安装 <code>zsh</code> 的，在终端使用 <code>cat /etc/shells</code> 命令来查看系统都安装了哪些 shell，如下图，很高兴 Mac 系统默认就已经安装了 <code>zsh</code>。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170428-01-blog.png" alt=""></p>
<p>如果没有安装，可以使用以下命令来安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install zsh</div></pre></td></tr></table></figure></p>
<p>那怎么查看系统当前使用的是哪种 shell 呢？<br>可以使用 <code>echo $SHELL</code> 命令来查看，在 Mac 系统中，默认使用的是 <code>bash</code>。</p>
<h3 id="安装-oh-my-zsh：通过命令行使用-curl-或-wget-来安装。"><a href="#安装-oh-my-zsh：通过命令行使用-curl-或-wget-来安装。" class="headerlink" title="安装 oh-my-zsh：通过命令行使用 curl 或 wget 来安装。"></a>安装 oh-my-zsh：通过命令行使用 curl 或 wget 来安装。</h3><p><strong>curl 命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure></p>
<p><strong>wget 命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure></p>
<p><strong><em>注意：</em></strong>安装的 oh-my-zsh 是一个隐藏文件，在用户目录下，需要开启隐藏文件可见才能看到，另外有一个 <code>~/.zshrc</code> 的隐藏文件，安装 oh-my-zsh 时，它会自动对这个文件进行 <code>zsh</code> 的相关环境变量等设置，可以使用 <code>vim</code> 编辑器来查看或者进行其它的自定义设置（比如，修改默认的主题，添加喜欢的插件等）。</p>
<h3 id="切换系统默认的-shell-为-zsh"><a href="#切换系统默认的-shell-为-zsh" class="headerlink" title="切换系统默认的 shell 为 zsh"></a>切换系统默认的 shell 为 zsh</h3><p>安装完 oh-my-zsh 后，使用以下命令来切换 shell。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s /bin/zsh</div></pre></td></tr></table></figure></p>
<p>如果不清楚 <code>zsh</code> 在系统中的路径在哪里，使用以下命令来查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ which -a zsh</div></pre></td></tr></table></figure></p>
<p>如果你的系统没有预装 <code>zsh</code>，是自己手动安装的，那么切换 <code>zsh</code> 可能会报以下错误：<br><code>chsh: WARNING: shell &#39;/bin/zsh&#39; does not exist.</code></p>
<p>这是因为系统在 <code>/etc/shells</code> 列表中没有找到 <code>zsh</code> 这个 shell，只要把它加到这个列表里面就好了。使用以下命令打开 <code>vim</code> 编辑器，将 <code>/bin/zsh</code> 添加到末尾，<code>:wq</code> 保存退出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/shells</div></pre></td></tr></table></figure></p>
<p>以上都没有问题后，现在关闭终端重新打开应该就看到不一样的界面样式了。</p>
<h3 id="修改（自定义）oh-my-zsh-配置"><a href="#修改（自定义）oh-my-zsh-配置" class="headerlink" title="修改（自定义）oh-my-zsh 配置"></a>修改（自定义）oh-my-zsh 配置</h3><p>oh-my-zsh 的所有配置都可以在 <code>~/.zshrc</code> 这个文件中修改或添加，里面的注释也很详细，有很多设置都是被注释掉的，如果需要的话打开注释即可。</p>
<p><strong>主题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set name of the theme to load. Optionally, if you set this to &quot;random&quot;</div><div class="line"># it&apos;ll load a random theme each time that oh-my-zsh is loaded.</div><div class="line"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</div><div class="line">ZSH_THEME=&quot;robbyrussell&quot;</div></pre></td></tr></table></figure></p>
<p>默认的主题是 <code>robbyrussell</code>，要替换其它主题只要更改这个字段即可，所有的主题都在 <code>~/.oh-my-zsh/themes/</code> 这个目录下，你可以查看所有的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">主题截图</a>来选择一个自己喜欢的。</p>
<p><strong>别名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Set personal aliases, overriding those provided by oh-my-zsh libs,</div><div class="line"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</div><div class="line"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</div><div class="line"># For a full list of active aliases, run `alias`.</div><div class="line">#</div><div class="line"># Example aliases</div><div class="line"># alias zshconfig=&quot;mate ~/.zshrc&quot;</div><div class="line"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</div></pre></td></tr></table></figure></p>
<p>通过以上示例，我们可以设置自己常用的命令别名，比如我这里设置的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 打开 Sublime Text</div><div class="line">alias st=&apos;open -a &quot;Sublime Text&quot;&apos;</div><div class="line"># 打开 Xcode</div><div class="line">alias xc=&apos;open -a &quot;Xcode&quot;&apos;</div><div class="line"># 打开指定的文件，比如以下是我的 xcode 项目路径</div><div class="line">alias xcyslf=&apos;open ~/Desktop/公司文件/项目代码/yslf-ios-new/yslf.xcworkspace&apos;</div></pre></td></tr></table></figure></p>
<p><a id="plugins"></a><strong>插件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</div><div class="line"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</div><div class="line"># Example format: plugins=(rails git textmate ruby lighthouse)</div><div class="line"># Add wisely, as too many plugins slow down shell startup.</div><div class="line">plugins=(</div><div class="line">  git</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>oh-my-zsh 默认安装了 <code>git</code> 插件，所有的插件都在 <code>~/.oh-my-zsh/plugins/</code> 这个目录下，如果要添加其它的插件，将插件名称使用空格隔开放到括号中即可；值得注意的是，插件最好还是别添加太多，以免会影响开启终端的速度。<br>另外，这里不得不说下 <code>git</code> 这个插件，毕竟每天都在敲的基本就都是 <code>git</code> 命令，这个插件简化了很多命令操作，其实就是设置了很多的别名，列举如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">alias g=&apos;git&apos;</div><div class="line"></div><div class="line">alias ga=&apos;git add&apos;</div><div class="line">alias gaa=&apos;git add --all&apos;</div><div class="line"></div><div class="line">alias gb=&apos;git branch&apos;</div><div class="line">alias gba=&apos;git branch -a&apos;</div><div class="line">alias gbd=&apos;git branch -d&apos;</div><div class="line"></div><div class="line">alias gc=&apos;git commit -v&apos;</div><div class="line">alias gcam=&apos;git commit -a -m&apos;</div><div class="line">alias gcsm=&apos;git commit -s -m&apos;</div><div class="line">alias gcb=&apos;git checkout -b&apos;</div><div class="line">alias gcf=&apos;git config --list&apos;</div><div class="line">alias gcl=&apos;git clone --recursive&apos;</div><div class="line">alias gcm=&apos;git checkout master&apos;</div><div class="line">alias gcd=&apos;git checkout develop&apos;</div><div class="line">alias gcmsg=&apos;git commit -m&apos;</div></pre></td></tr></table></figure></p>
<p>以上设置，如 <code>alias ga=&#39;git add&#39;</code>，输入 <code>ga</code> 就等于输入一条完整的 <code>git add</code> 命令。<br>更多的别名和功能可以打开 <code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code> 这个文件来查看，或者查看更详细的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="external">官方文档</a>。</p>
<p><strong>配置（自定义）其它插件</strong></p>
<p>文章开头讲到的命令或者目录自动补全，其实是一个超酷的 <code>zsh</code> 插件，现在我们安装了 oh-my-zsh 这个强大的框架，使用这个插件就 so easy 了。先来看看使用效果图吧！</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170428-02-blog.png" alt=""></p>
<p>首先，需要把这个插件下载下来，我已经给童鞋们准备好了，<a href="http://mimosa-pudica.net/src/incr-0.2.zsh" target="_blank" rel="external">点我下载吧</a>！如果下载不了，那就直接拷贝下面的代码！先要说明的是自定义插件的存放位置，在上面<a href="#plugins"><strong>插件</strong></a>那里作者已经说了建议放在 <code>~/.oh-my-zsh/custom/plugins/</code> 这个目录下（ Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/ ）。<br>然后，在 <code>/plugins/</code> 目录下建一个名为 <code>incr</code> 的文件夹（当然名字你喜欢），将下载的 <code>incr-0.2.zsh</code> 文件放在这里（在这个文件夹里面创建 <code>incr-0.2.zsh</code> 文件，将拷贝的代码放进去就 OK 啦！）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"># Incremental completion for zsh</div><div class="line"># by y.fujii &lt;y-fujii at mimosa-pudica.net&gt;, public domain</div><div class="line"></div><div class="line">autoload -U compinit</div><div class="line">zle -N self-insert self-insert-incr</div><div class="line">zle -N vi-cmd-mode-incr</div><div class="line">zle -N vi-backward-delete-char-incr</div><div class="line">zle -N backward-delete-char-incr</div><div class="line">zle -N expand-or-complete-prefix-incr</div><div class="line">compinit</div><div class="line"></div><div class="line">bindkey -M viins &apos;^[&apos; vi-cmd-mode-incr</div><div class="line">bindkey -M viins &apos;^h&apos; vi-backward-delete-char-incr</div><div class="line">bindkey -M viins &apos;^?&apos; vi-backward-delete-char-incr</div><div class="line">bindkey -M viins &apos;^i&apos; expand-or-complete-prefix-incr</div><div class="line">bindkey -M emacs &apos;^h&apos; backward-delete-char-incr</div><div class="line">bindkey -M emacs &apos;^?&apos; backward-delete-char-incr</div><div class="line">bindkey -M emacs &apos;^i&apos; expand-or-complete-prefix-incr</div><div class="line"></div><div class="line">unsetopt automenu</div><div class="line">compdef -d scp</div><div class="line">compdef -d tar</div><div class="line">compdef -d make</div><div class="line">compdef -d java</div><div class="line">compdef -d svn</div><div class="line">compdef -d cvs</div><div class="line"></div><div class="line"># TODO:</div><div class="line">#     cp dir/</div><div class="line"></div><div class="line">now_predict=0</div><div class="line"></div><div class="line">function limit-completion</div><div class="line">&#123;</div><div class="line">	if ((compstate[nmatches] &lt;= 1)); then</div><div class="line">		zle -M &quot;&quot;</div><div class="line">	elif ((compstate[list_lines] &gt; 6)); then</div><div class="line">		compstate[list]=&quot;&quot;</div><div class="line">		zle -M &quot;too many matches.&quot;</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function correct-prediction</div><div class="line">&#123;</div><div class="line">	if ((now_predict == 1)); then</div><div class="line">		if [[ &quot;$BUFFER&quot; != &quot;$buffer_prd&quot; ]] || ((CURSOR != cursor_org)); then</div><div class="line">			now_predict=0</div><div class="line">		fi</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function remove-prediction</div><div class="line">&#123;</div><div class="line">	if ((now_predict == 1)); then</div><div class="line">		BUFFER=&quot;$buffer_org&quot;</div><div class="line">		now_predict=0</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function show-prediction</div><div class="line">&#123;</div><div class="line">	# assert(now_predict == 0)</div><div class="line">	if</div><div class="line">		((PENDING == 0)) &amp;&amp;</div><div class="line">		((CURSOR &gt; 1)) &amp;&amp;</div><div class="line">		[[ &quot;$PREBUFFER&quot; == &quot;&quot; ]] &amp;&amp;</div><div class="line">		[[ &quot;$BUFFER[CURSOR]&quot; != &quot; &quot; ]]</div><div class="line">	then</div><div class="line">		cursor_org=&quot;$CURSOR&quot;</div><div class="line">		buffer_org=&quot;$BUFFER&quot;</div><div class="line">		comppostfuncs=(limit-completion)</div><div class="line">		zle complete-word</div><div class="line">		cursor_prd=&quot;$CURSOR&quot;</div><div class="line">		buffer_prd=&quot;$BUFFER&quot;</div><div class="line">		if [[ &quot;$buffer_org[1,cursor_org]&quot; == &quot;$buffer_prd[1,cursor_org]&quot; ]]; then</div><div class="line">			CURSOR=&quot;$cursor_org&quot;</div><div class="line">			if [[ &quot;$buffer_org&quot; != &quot;$buffer_prd&quot; ]] || ((cursor_org != cursor_prd)); then</div><div class="line">				now_predict=1</div><div class="line">			fi</div><div class="line">		else</div><div class="line">			BUFFER=&quot;$buffer_org&quot;</div><div class="line">			CURSOR=&quot;$cursor_org&quot;</div><div class="line">		fi</div><div class="line">		echo -n &quot;\e[32m&quot;</div><div class="line">	else</div><div class="line">		zle -M &quot;&quot;</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function preexec</div><div class="line">&#123;</div><div class="line">	echo -n &quot;\e[39m&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function vi-cmd-mode-incr</div><div class="line">&#123;</div><div class="line">	correct-prediction</div><div class="line">	remove-prediction</div><div class="line">	zle vi-cmd-mode</div><div class="line">&#125;</div><div class="line"></div><div class="line">function self-insert-incr</div><div class="line">&#123;</div><div class="line">	correct-prediction</div><div class="line">	remove-prediction</div><div class="line">	if zle .self-insert; then</div><div class="line">		show-prediction</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function vi-backward-delete-char-incr</div><div class="line">&#123;</div><div class="line">	correct-prediction</div><div class="line">	remove-prediction</div><div class="line">	if zle vi-backward-delete-char; then</div><div class="line">		show-prediction</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function backward-delete-char-incr</div><div class="line">&#123;</div><div class="line">	correct-prediction</div><div class="line">	remove-prediction</div><div class="line">	if zle backward-delete-char; then</div><div class="line">		show-prediction</div><div class="line">	fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">function expand-or-complete-prefix-incr</div><div class="line">&#123;</div><div class="line">	correct-prediction</div><div class="line">	if ((now_predict == 1)); then</div><div class="line">		CURSOR=&quot;$cursor_prd&quot;</div><div class="line">		now_predict=0</div><div class="line">		comppostfuncs=(limit-completion)</div><div class="line">		zle list-choices</div><div class="line">	else</div><div class="line">		remove-prediction</div><div class="line">		zle expand-or-complete-prefix</div><div class="line">	fi</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，需要修改 <code>~/.zshrc</code> 配置文件，在文件末尾加上以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.oh-my-zsh/custom/plugins/incr/incr-0.2.zsh</div></pre></td></tr></table></figure></p>
<p>当以上步骤完成后，你可能重新打开终端想看下这个神奇的效果，但是发现并！没！有！于是忍不住 what the f… 😂😂😂 好了，继续输入以下命令吧，因为修改后的 <code>~/.zshrc</code> 文件需要执行一下 <code>source</code> 命令才会生效，以后的每一次修改想要马上生效都需要执行 <code>source</code> 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source ~/.zshrc</div></pre></td></tr></table></figure></p>
<p><strong>快速跳转插件</strong></p>
<p>再安利一个快速跳转的插件，😂名字叫 <strong><a href="https://github.com/rupa/z" target="_blank" rel="external">z</a></strong>，这个插件配合前面设置的自动补全插件，那你的命令行操作起来就真是 <strong>666</strong> 了。</p>
<p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install z</div></pre></td></tr></table></figure></p>
<p>安装完后，使用以下命令查看安装的文件列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew list -f z</div></pre></td></tr></table></figure></p>
<p>正常情况下会输出以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/Cellar/z/1.9/etc/profile.d/z.sh</div><div class="line">/usr/local/Cellar/z/1.9/share/man/man1/z.1</div></pre></td></tr></table></figure></p>
<p>最后，还是修改 <code>~/.zshrc</code> 配置文件，在文件末尾加上以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /usr/local/etc/profile.d/z.sh</div></pre></td></tr></table></figure></p>
<p>别忘了，<code>source ~/.zshrc</code> 生效，重启终端。</p>
<p>使用的时候，比如：<code>z ~</code>，<code>z desktop</code>，<code>z xxx目录路径</code> 回车就能快速跳转到指定的位置了，完全可以替代掉 <code>cd</code> 命令，不必一层层的跳转，任何时候想去哪里就去哪里，配合上自动补全插件，各种补全，文件名、目录路径、命令名等，👏简直不要太好用。<br><code>z</code> 会记录你访问过的目录，比如：<code>z desktop</code>，第二次，直接输入 <code>z d</code> 就能跳转到 <code>Desktop</code> 目录，在当前目录下，甚至直接输入目录名就能跳转，比如：<code>~</code>，<code>..</code>。</p>
<p><strong>补充：</strong></p>
<p>用户环境变量，以下是我的 <code>~/.bash_profile</code> 环境变量中的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">alias setproxy=&quot;export http_proxy=http://127.0.0.1:8080; export https_proxy=$http_proxy; echo &apos;HTTP Proxy on&apos;;&quot;</div><div class="line">alias unsetproxy=&quot;unset http_proxy; unset https_proxy; echo &apos;HTTP Proxy off&apos;;&quot;</div><div class="line"></div><div class="line">source ~/.profile</div><div class="line">source ~/.bashrc</div><div class="line"></div><div class="line">[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; source &quot;$HOME/.rvm/scripts/rvm&quot; # Load RVM into a shell session *as a function*</div></pre></td></tr></table></figure></p>
<p>在切换 shell 为 <code>zsh</code> 后，启动系统会加载 <code>~/.zshrc</code> 文件，而不会加载 <code>~/.bash_profile</code> 文件（shell 为 <code>bash</code> 时才会执行），导致里面的设置无效，解决方法是在 <code>~/.zshrc</code> 文件末尾加上以下代码，这样每次启动的时候就会执行  <code>zsh</code> 的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>修改后别忘了，<code>source ~/.zshrc</code> 生效。<br>啊，大致就是这些了。还没有安装的童鞋快 get 起来吧，让你的终端快如飞 。。。</p>
<p><strong>参考：</strong><br><a href="https://github.com/nodejh/nodejh.github.io/issues/34" target="_blank" rel="external">macOS/Linux 环境变量设置</a><br><a href="http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html" target="_blank" rel="external">oh-my-zsh配置你的zsh提高shell逼格终极选择</a><br><a href="http://yijiebuyi.com/blog/36955b84c57e338dd8255070b80829bf.html" target="_blank" rel="external">incr.zsh 补全插件 让你在zsh 模式下全自动补全指令或目录</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170428-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;终端（命令行）作为程序 🦍们每天打交道的工具之一，熟练使用能够有效的提高工作效率，虽然每天敲的基本都是一些常用的
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Technology/Shell/"/>
    
    
      <category term="oh-my-zsh" scheme="http://yoursite.com/tags/oh-my-zsh/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>利用 Hexo 搭建博客</title>
    <link href="http://yoursite.com/2017/04/19/hello-hexo/"/>
    <id>http://yoursite.com/2017/04/19/hello-hexo/</id>
    <published>2017-04-19T07:35:34.000Z</published>
    <updated>2018-04-14T08:56:27.433Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-00-blog.png" alt=""></p>
<p>看到越来越多人搭建了漂亮的个人博客网站，一直心里痒痒想着自己也弄一个，刚好最近项目告一段落了有点空闲时间，于是网上找了教程就开始(zhuangbility)啦！</p>
<p>当然写本文的目的只是为了记录我自己的搭建过程及踩的坑，更详细的建站等细节大家可以查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo的官方文档</a>，而且本文只是针对Mac OSX 系统平台, Windows系统的表示不会(话说很多年没用过了，忘记Windows长啥样啦(づ｡◕‿‿◕｡)づ)。所以还是建议大家看官方文档吧，各平台都有说明，好啦，废话不多说。</p>
<p>目前搭建免费博客有两种方式：<br>一是：<code>github Pages + Hexo</code>； 二是：<code>github Pages + Jekyll</code>；<br>两者都是利用github既免费又稳定的空间作为托管，对比了下，<strong>Hexo</strong> 更简洁高效更多人使用，有非常详细的建站文档，当然 <strong>Jekyll</strong> 也有文档提供，感兴趣的童鞋可以<a href="http://jekyllcn.com/docs/home/" target="_blank" rel="external">看这里</a>，但是相比Hexo定制性更高，更有丰富的Theme可以自定义，如果你是一名前端开发者，甚至可以自己写Theme；so！Hexo 绝对是爱折腾兼完美主义者的不二之选。</p>
<h3 id="一-Github-Account"><a href="#一-Github-Account" class="headerlink" title="一. Github Account"></a>一. Github Account</h3><p>对于一个开发者来说，以下步骤我想可以忽略吧。</p>
<p>1.1. 你需要一个GitHub帐号，到<a href="https://github.com/" target="_blank" rel="external">GitHub官网</a>按照步骤注册即可。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-01-blog.png" alt="join GitHub"></p>
<p>1.2. 注册成功后，你需要创建一个新的仓库。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-02-blog.png?imageView/1/w/500/h/300" alt="new repository"> </p>
<p>1.3. 创建仓库过程说明，这里需要注意的是仓库名称的命名规则，必须是<code>注册名.github.io</code>这种格式，后续就可以通过<code>https://注册名.github.io/</code>来访问你的博客网站啦。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-03-blog.png" alt="create repository"></p>
<h3 id="二-环境准备"><a href="#二-环境准备" class="headerlink" title="二. 环境准备"></a>二. 环境准备</h3><h3 id="1-Git"><a href="#1-Git" class="headerlink" title="1. Git"></a>1. <a href="https://git-scm.com/" target="_blank" rel="external">Git</a></h3><p>首先安装Git，后续的操作全部依赖它，安装教程<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">看官方文档</a>So Easy，或者自行Google。<br>PS: 相信做开发的童鞋都不陌生, iOS 开发者更不用说，xcode 自带！</p>
<h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2. Node.js"></a>2. <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></h3><p>在安装Node之前，需要先安装Node版本管理工具<code>nvm</code>，用于Node版本切换，安装方式有两种，先来看第一种，<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a> 安装方式，比较麻烦，并且这种方式安装后Node版本切换有问题，因此不推荐这种方式，安装完后不需要重启终端，依次执行下列命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ brew install nvm  </div><div class="line">$ mkdir ~/.nvm</div><div class="line">$ export NVM_DIR=~/.nvm</div><div class="line">$ . $(brew --prefix nvm)/nvm.sh</div></pre></td></tr></table></figure>
<p>第二种安装方式：</p>
<p><strong>curl</strong>安装方式，如果没有使用<code>Homebrew</code>安装过，直接跳过前面的命令执行最后一条即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装 </div><div class="line">$ npm ls -g --depth=0 </div><div class="line"></div><div class="line"># 删除全局 node_modules 目录</div><div class="line">$ sudo rm -rf /usr/local/lib/node_modules </div><div class="line"></div><div class="line"># 删除 node </div><div class="line">$ sudo rm /usr/local/bin/node </div><div class="line"></div><div class="line"># 删除全局 node 模块注册的软链</div><div class="line">$ cd /usr/local/bin &amp;&amp; ls -l | grep &quot;../lib/node_modules/&quot; | awk &apos;&#123;print $9&#125;&apos;| xargs rm  </div><div class="line"></div><div class="line"># 最后，安装nvm的正确姿势</div><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash</div></pre></td></tr></table></figure>
<p>然后可以看到下载<code>nvm</code>成功并安装，并且在<code>~/.zshrc</code>中已经自动加入了环境变量，现在需要重启你的终端。<del>（什么是<code>zshrc</code>？后面再专门写篇文章来讲，这里先略过）</del> 传送门：<a href="https://kejiasir.github.io/2017/04/28/oh-my-zsh/" target="_blank" rel="external">提高Terminal效率的Shell，oh-my-zsh</a>，在这篇文章里面可以了解到 <code>zshrc</code>。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-04-blog.png" alt="install nvm"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</div></pre></td></tr></table></figure>
<p>这里附上一篇<a href="http://www.imooc.com/article/14617" target="_blank" rel="external">《正确的安装和使用nvm(mac)》</a>文章链接，写的非常详细，大家可以参考。 </p>
<p>重启终端后，执行以下命令即可安装<strong>Node.js</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装node，版本5以上</div><div class="line">$ nvm install 5</div></pre></td></tr></table></figure>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-05-blog.png" alt="install node"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 查看node版本</div><div class="line">$ nvm ls</div></pre></td></tr></table></figure>
<h3 id="3-Hexo"><a href="#3-Hexo" class="headerlink" title="3. Hexo"></a>3. <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></h3><p>以上环境安装完了，最后我们就可以安装<strong>Hexo</strong>啦！<br>执行以下命令，这里需要申请sudo权限，输入管理员密码即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装hexo</div><div class="line">$ sudo npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>此时命令行 bilibala~ 输出好多东西，稍等片刻就安装好了。</p>
<p><img src="http://oonis1a4c.bkt.clouddn.com/20170419-06-blog.png" alt="install hexo"></p>
<p>安装 Hexo 完成后，执行以下命令，在指定的文件夹目录下创建博客网站所需的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init MyBlog</div><div class="line">$ cd MyBlog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>最后，再安装 <strong><a href="$ npm install hexo-deployer-git --save">博客自动部署工具</a></strong> 帮助我们将编写的文章发布并部署到github服务器。<br>注意后面的<code>--save</code>一定要带上，不然部署到github时会报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装git自动部署工具</div><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p><strong><em>到此为止，已经成功安装好所有环境，建站完成。</em></strong></p>
<h3 id="三-网站配置"><a href="#三-网站配置" class="headerlink" title="三. 网站配置"></a>三. 网站配置</h3><p>建站完成后，在指定目录下的 <code>MyBlog</code> 文件夹中的文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml		# 网站的 配置 信息，可以在这里配置大部分的参数。</div><div class="line">├── db.json		# 缓存文件</div><div class="line">├── debug.log		# 调试信息</div><div class="line">├── node_modules	# 安装的node文件夹</div><div class="line">├── nvm			# 安装的nvm文件</div><div class="line">├── package.json 	# 应用程序的信息。</div><div class="line">├── scaffolds		# 模版文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件。</div><div class="line">├── source		# 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。 </div><div class="line">|   ├── _drafts		# 草稿。</div><div class="line">|   └── _posts		# 新建的文章.md 会放到这个文件夹。</div><div class="line">└── themes		# 主题文件夹，Hexo 会根据主题来生成静态页面。</div></pre></td></tr></table></figure>
<p>若要修改网站配置，使用vim编辑器打开<code>_config.yml</code>文件，按<code>i</code>即可进行编辑。<br>以下是我的站点配置，你需要修改的是你的网站标题和最下面的<code>deploy</code>配置，修改<code>repo</code>为你的github仓库地址即可，其它可选；</p>
<p>说一下<code>theme</code>字段，这个是主题设置，默认为<code>next</code>主题，我选择的是<a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="external">Hueman</a>主题，更多主题可以<a href="https://hexo.io/themes/" target="_blank" rel="external">看这里</a>，实在太多，任君选择。（主题替换还是很多坑的，有时间再写一篇文章专门讲）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration             # hexo 配置</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site                           # 网站</div><div class="line">title: Arvin&apos;s                   # 网站标题</div><div class="line">subtitle: Arvin&apos;s blog           # 网站副标题</div><div class="line">description: 有幸站在互联网技术革命的浪潮之上, 奋勇前行. # 网站描述</div><div class="line">author: Arvin&apos;s                  # 您的名字</div><div class="line">language: zh-CN                  # 网站使用的语言</div><div class="line">timezone:                        # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</div><div class="line"></div><div class="line"># URL                            # 链接格式</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://yoursite.com                # 网址</div><div class="line">root: /                                 # 网站根目录</div><div class="line">permalink: :year/:month/:day/:title/    # 文章的 永久链接 格式</div><div class="line">permalink_defaults:                     # 永久链接中各部分的默认值</div><div class="line"></div><div class="line"># RSS订阅支持</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line"></div><div class="line"># Feed Atom</div><div class="line">feed:</div><div class="line">type: atom</div><div class="line">path: atom.xml</div><div class="line">limit: 20</div><div class="line"></div><div class="line"># Directory                      # 目录</div><div class="line">source_dir: source               # 资源文件夹，这个文件夹用来存放内容。</div><div class="line">public_dir: public               # 公共文件夹，这个文件夹用于存放生成的站点文件。</div><div class="line">tag_dir: tags                    # 标签文件夹</div><div class="line">archive_dir: archives            # 归档文件夹</div><div class="line">category_dir: categories         # 分类文件夹</div><div class="line">code_dir: downloads/code         # Include code 文件夹</div><div class="line">i18n_dir: :lang                  # 国际化（i18n）文件夹</div><div class="line">skip_render:                     # 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</div><div class="line"></div><div class="line"># Writing                                               # 文章</div><div class="line">new_post_name: :title.md # File name of new posts       # 新文章的文件名称</div><div class="line">default_layout: post                                    # 预设布局</div><div class="line">titlecase: false # Transform title into titlecase       # 把标题转换为 title case</div><div class="line">external_link: true # Open external links in new tab    # 在新标签中打开链接</div><div class="line">filename_case: 0                                        # 把文件名称转换为 (1) 小写或 (2) 大写</div><div class="line">render_drafts: false                                    # 显示草稿</div><div class="line">post_asset_folder: false                                # 启动 Asset 文件夹</div><div class="line">relative_link: false                                    # 把链接改为与根目录的相对位址</div><div class="line">future: true                                            # 显示未来的文章</div><div class="line">highlight:                                              # 代码块的设置</div><div class="line">  enable: true                   # 是否启用</div><div class="line">  line_number: true              # 显示行号</div><div class="line">  auto_detect: false             #</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag                 # 分类和标签</div><div class="line">default_category: uncategorized  # 默认分类</div><div class="line">category_map:                    # 分类别名</div><div class="line">tag_map:                         # 标签别名</div><div class="line"></div><div class="line"># Date / Time format             # 日期时间格式</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD          # 日期格式</div><div class="line">time_format: HH:mm:ss            # 时间格式</div><div class="line"></div><div class="line"># Pagination                     # 分页</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10                     # 每页显示的文章量 (0 = 关闭分页功能)</div><div class="line">pagination_dir: page             # 分页目录</div><div class="line"></div><div class="line"># Extensions                     # 拓展插件</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: hueman                    # 当前主题名称。值为false时禁用主题</div><div class="line"></div><div class="line"># Deployment                     # 部署</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:                          # 部署部分的设置</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:kejiasir/kejiasir.github.io.git</div><div class="line">  branch: master</div><div class="line">  message:</div></pre></td></tr></table></figure>
<h3 id="四-文章发布"><a href="#四-文章发布" class="headerlink" title="四. 文章发布"></a>四. 文章发布</h3><h4 id="1-文章新建"><a href="#1-文章新建" class="headerlink" title="1. 文章新建"></a>1. 文章新建</h4><p>执行下列命令来创建一篇新文章。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># layout 可以不写，默认为post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</div><div class="line"># title 文章标题，如果有空格，需使用双引号包括，例：“hello world”。</div><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<h4 id="2-文章布局"><a href="#2-文章布局" class="headerlink" title="2. 文章布局"></a>2. 文章布局</h4><p>Hexo 有三种默认布局：<code>page</code> 、<code>post</code>和 <code>draft</code>，它们分别对应不同的路径，如果你自定义布局将和 <code>post</code> 一样，都会储存到 <code>source/_posts</code> 这个文件夹。 </p>
<table>
<thead>
<tr>
<th>布局</th>
<th style="text-align:center">路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>page</td>
<td style="text-align:center">source</td>
</tr>
<tr>
<td>post</td>
<td style="text-align:center">source/_posts</td>
</tr>
<tr>
<td>draft</td>
<td style="text-align:center">source/_drafts</td>
</tr>
</tbody>
</table>
<h4 id="3-草稿"><a href="#3-草稿" class="headerlink" title="3. 草稿"></a>3. 草稿</h4><p>Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，可以通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，你也可以在命令中指定 layout 来设置布局（文章路径）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 把 source/_drafts 文件夹内的文章移动到 source/_posts 文件夹中</div><div class="line">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<h4 id="4-文章编写"><a href="#4-文章编写" class="headerlink" title="4. 文章编写"></a>4. 文章编写</h4><p>上面说到新建的文章不指定布局会默认保存在<code>source/_posts</code>路径下，新建文章后缀格式为<code>.md</code>文件，即需要使用<a href="http://www.markdown.cn/" target="_blank" rel="external">Markdown</a>语法编写，你可以使用<code>vim</code>编辑器进行编辑，但是可想而知那有多么恶心。所以还是选择一款专业的markdown编辑器吧，Mac平台的 <a href="https://www.macupdate.com/app/mac/40420/mou" target="_blank" rel="external">Mou</a> 编辑器不错；而我自己用的是 <a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb Lite</a> 免费版（国内开发者良心之作），体验已经非常不错，目前足以满足我的需求了，当然土豪可以购买收费版的支持下，据说功能足够强大。</p>
<p>文章编辑完成后，使用以下命令进行本地测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 启动服务器，你可以在浏览器中输入 http://localhost:4000/. 来访问你的博客网站，查看文章</div><div class="line">$ hexo server		---&gt;&gt;&gt; 可以简写为  hexo s</div></pre></td></tr></table></figure>
<h4 id="5-文章发布"><a href="#5-文章发布" class="headerlink" title="5. 文章发布"></a>5. 文章发布</h4><p>当然你可以随时在markdown编辑器中修改文章，记得存储（command+s），直到你想要部署到github，使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</div><div class="line">$ hexo clean		</div><div class="line"></div><div class="line"># 生成缓存和静态文件</div><div class="line">$ hexo generate		---&gt;&gt;&gt; 可以简写为  hexo g </div><div class="line"></div><div class="line"># 重新部署到服务器</div><div class="line">$ hexo deploy		---&gt;&gt;&gt; 可以简写为  hexo d</div></pre></td></tr></table></figure>
<p>到此，如无意外，你已经顺利部署文章到github服务器，快使用<code>https://注册名.github.io/</code>域名来访问你的博客网站，看看发布的文章吧。（域名绑定还没有弄，后面弄好了在写）  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oonis1a4c.bkt.clouddn.com/20170419-00-blog.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到越来越多人搭建了漂亮的个人博客网站，一直心里痒痒想着自己也弄一个，刚好最近项目告一段落了有点空闲时间，于是网上
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Technology/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
